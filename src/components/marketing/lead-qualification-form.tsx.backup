"use client";

import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Building,
  Target,
  User,
  BarChart3,
  AlertCircle,
  CheckCircle,
  ArrowRight,
  ArrowLeft,
  Loader2,
  Sparkles,
} from "lucide-react";

interface LeadQualificationData {
  companyName: string;
  industry: string;
  companySize: string;
  annualRevenue: string;
  website: string;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  jobTitle: string;
  decisionMaker: string;
  primaryGoals: string[];
  currentChallenges: string[];
  currentMarketingBudget: string;
  marketingTeamSize: string;
  currentMarketingTools: string[];
  implementationTimeline: string;
  budgetApproval: string;
  technicalReadiness: string;
  changeManagement: string;
  additionalInfo: string;
  preferredContactMethod: string;
  bestTimeToCall: string;
  marketingConsent: boolean;
  dataProcessingConsent: boolean;
}

interface LeadQualificationFormProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (data: LeadQualificationData) => void;
  product?: string;
}

const FORM_STEPS = [
  {
    id: "company",
    title: "Company Information",
    description: "Tell us about your organization",
    icon: Building,
  },
  {
    id: "contact",
    title: "Contact Details",
    description: "How can we reach you?",
    icon: User,
  },
  {
    id: "needs",
    title: "Business Needs",
    description: "What are your marketing goals?",
    icon: Target,
  },
  {
    id: "readiness",
    title: "Implementation Readiness",
    description: "Are you ready to scale?",
    icon: BarChart3,
  },
  {
    id: "additional",
    title: "Additional Information",
    description: "Any other details?",
    icon: AlertCircle,
  },
];

const PRIMARY_GOALS = [
  "Increase lead generation",
  "Improve content quality",
  "Automate marketing processes",
  "Scale marketing efforts",
  "Reduce marketing costs",
  "Improve ROI tracking",
  "Enhance brand consistency",
  "Accelerate time-to-market",
];

const CURRENT_CHALLENGES = [
  "Lack of quality content",
  "Inconsistent messaging",
  "Manual processes",
  "Limited marketing resources",
  "Poor ROI visibility",
  "Scaling difficulties",
  "Time constraints",
  "Technical limitations",
];

const MARKETING_TOOLS = [
  "HubSpot",
  "Mailchimp",
  "Hootsuite",
  "Google Analytics",
  "Canva",
  "WordPress",
  "Shopify",
  "Salesforce",
  "Other",
];

export default function LeadQualificationForm({
  isOpen,
  onClose,
  onSubmit,
  product = "MarketingMachine",
}: LeadQualificationFormProps) {
  const [currentStep, setCurrentStep] = useState(0);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState<LeadQualificationData>({
    companyName: "",
    industry: "",
    companySize: "",
    annualRevenue: "",
    website: "",
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    jobTitle: "",
    decisionMaker: "",
    primaryGoals: [],
    currentChallenges: [],
    currentMarketingBudget: "",
    marketingTeamSize: "",
    currentMarketingTools: [],
    implementationTimeline: "",
    budgetApproval: "",
    technicalReadiness: "",
    changeManagement: "",
    additionalInfo: "",
    preferredContactMethod: "email",
    bestTimeToCall: "",
    marketingConsent: false,
    dataProcessingConsent: false,
  });

  const handleFieldChange = (field: keyof LeadQualificationData, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleNext = () => {
    if (currentStep < FORM_STEPS.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handlePrev = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleSubmit = async () => {
    setIsSubmitting(true);
    try {
      await onSubmit(formData);
      onClose();
    } catch (error) {
      console.error("Error submitting form:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const progress = ((currentStep + 1) / FORM_STEPS.length) * 100;

  const renderStepContent = () => {
    switch (FORM_STEPS[currentStep].id) {
      case "company":
        return (
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label className="text-slate-300">Company Name *</Label>
                <Input
                  value={formData.companyName}
                  onChange={e => handleFieldChange("companyName", e.target.value)}
                  className="bg-slate-800/50 border-slate-600 text-white"
                  placeholder="Your company name"
                />
              </div>
              <div>
                <Label className="text-slate-300">Industry *</Label>
                <Select
                  value={formData.industry}
                  onValueChange={val => handleFieldChange("industry", val)}
                >
                  <SelectTrigger className="bg-slate-800/50 border-slate-600 text-white">
                    <SelectValue placeholder="Select industry" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="saas">SaaS / Software</SelectItem>
                    <SelectItem value="ecommerce">E-commerce</SelectItem>
                    <SelectItem value="healthcare">Healthcare</SelectItem>
                    <SelectItem value="fintech">FinTech</SelectItem>
                    <SelectItem value="education">Education</SelectItem>
                    <SelectItem value="professional-services">Professional Services</SelectItem>
                    <SelectItem value="manufacturing">Manufacturing</SelectItem>
                    <SelectItem value="other">Other</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label className="text-slate-300">Company Size *</Label>
                <Select
                  value={formData.companySize}
                  onValueChange={val => handleFieldChange("companySize", val)}
                >
                  <SelectTrigger className="bg-slate-800/50 border-slate-600 text-white">
                    <SelectValue placeholder="Select company size" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="1-10">1-10 employees</SelectItem>
                    <SelectItem value="11-50">11-50 employees</SelectItem>
                    <SelectItem value="51-200">51-200 employees</SelectItem>
                    <SelectItem value="201-1000">201-1000 employees</SelectItem>
                    <SelectItem value="1000+">1000+ employees</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label className="text-slate-300">Annual Revenue</Label>
                <Select
                  value={formData.annualRevenue}
                  onValueChange={val => handleFieldChange("annualRevenue", val)}
                >
                  <SelectTrigger className="bg-slate-800/50 border-slate-600 text-white">
                    <SelectValue placeholder="Select revenue range" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="under-100k">Under €100K</SelectItem>
                    <SelectItem value="100k-500k">€100K - €500K</SelectItem>
                    <SelectItem value="500k-1m">€500K - €1M</SelectItem>
                    <SelectItem value="1m-5m">€1M - €5M</SelectItem>
                    <SelectItem value="5m-10m">€5M - €10M</SelectItem>
                    <SelectItem value="10m+">€10M+</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            <div>
              <Label className="text-slate-300">Website</Label>
              <Input
                value={formData.website}
                onChange={e => handleFieldChange("website", e.target.value)}
                className="bg-slate-800/50 border-slate-600 text-white"
                placeholder="https://yourcompany.com"
              />
            </div>
          </div>
        );

      case "contact":
        return (
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label className="text-slate-300">First Name *</Label>
                <Input
                  value={formData.firstName}
                  onChange={e => handleFieldChange("firstName", e.target.value)}
                  className="bg-slate-800/50 border-slate-600 text-white"
                  placeholder="Your first name"
                />
              </div>
              <div>
                <Label className="text-slate-300">Last Name *</Label>
                <Input
                  value={formData.lastName}
                  onChange={e => handleFieldChange("lastName", e.target.value)}
                  className="bg-slate-800/50 border-slate-600 text-white"
                  placeholder="Your last name"
                />
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label className="text-slate-300">Email *</Label>
                <Input
                  type="email"
                  value={formData.email}
                  onChange={e => handleFieldChange("email", e.target.value)}
                  className="bg-slate-800/50 border-slate-600 text-white"
                  placeholder="your.email@company.com"
                />
              </div>
              <div>
                <Label className="text-slate-300">Phone</Label>
                <Input
                  type="tel"
                  value={formData.phone}
                  onChange={e => handleFieldChange("phone", e.target.value)}
                  className="bg-slate-800/50 border-slate-600 text-white"
                  placeholder="+31 6 12345678"
                />
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label className="text-slate-300">Job Title *</Label>
                <Input
                  value={formData.jobTitle}
                  onChange={e => handleFieldChange("jobTitle", e.target.value)}
                  className="bg-slate-800/50 border-slate-600 text-white"
                  placeholder="e.g. Marketing Director"
                />
              </div>
              <div>
                <Label className="text-slate-300">Decision Making Authority</Label>
                <Select
                  value={formData.decisionMaker}
                  onValueChange={val => handleFieldChange("decisionMaker", val)}
                >
                  <SelectTrigger className="bg-slate-800/50 border-slate-600 text-white">
                    <SelectValue placeholder="Your decision authority" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="final-decision">Final decision maker</SelectItem>
                    <SelectItem value="strong-influence">Strong influence on decision</SelectItem>
                    <SelectItem value="some-influence">Some influence</SelectItem>
                    <SelectItem value="no-influence">No influence on decision</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>
        );

      case "needs":
        return (
          <div className="space-y-6">
            <div>
              <Label className="text-slate-300 mb-3 block">Primary Marketing Goals (select all that apply)</Label>
              <div className="grid grid-cols-2 gap-2">
                {PRIMARY_GOALS.map(goal => (
                  <Button
                    key={goal}
                    type="button"
                    variant={formData.primaryGoals.includes(goal) ? "default" : "outline"}
                    size="sm"
                    onClick={() => {
                      const newGoals = formData.primaryGoals.includes(goal)
                        ? formData.primaryGoals.filter(g => g !== goal)
                        : [...formData.primaryGoals, goal];
                      handleFieldChange("primaryGoals", newGoals);
                    }}
                    className={`text-left justify-start p-3 h-auto ${
                      formData.primaryGoals.includes(goal)
                        ? "bg-blue-600 text-white"
                        : "bg-slate-800/50 border-slate-600 text-slate-300 hover:bg-slate-700"
                    }`}
                  >
                    {goal}
                  </Button>
                ))}
              </div>
            </div>
            
            <div>
              <Label className="text-slate-300 mb-3 block">Current Marketing Challenges (select all that apply)</Label>
              <div className="grid grid-cols-2 gap-2">
                {CURRENT_CHALLENGES.map(challenge => (
                  <Button
                    key={challenge}
                    type="button"
                    variant={formData.currentChallenges.includes(challenge) ? "default" : "outline"}
                    size="sm"
                    onClick={() => {
                      const newChallenges = formData.currentChallenges.includes(challenge)
                        ? formData.currentChallenges.filter(c => c !== challenge)
                        : [...formData.currentChallenges, challenge];
                      handleFieldChange("currentChallenges", newChallenges);
                    }}
                    className={`text-left justify-start p-3 h-auto ${
                      formData.currentChallenges.includes(challenge)
                        ? "bg-red-600 text-white"
                        : "bg-slate-800/50 border-slate-600 text-slate-300 hover:bg-slate-700"
                    }`}
                  >
                    {challenge}
                  </Button>
                ))}
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label className="text-slate-300">Current Marketing Budget</Label>
                <Select
                  value={formData.currentMarketingBudget}
                  onValueChange={val => handleFieldChange("currentMarketingBudget", val)}
                >
                  <SelectTrigger className="bg-slate-800/50 border-slate-600 text-white">
                    <SelectValue placeholder="Select budget range" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="under-5k">Under €5K/month</SelectItem>
                    <SelectItem value="5k-15k">€5K - €15K/month</SelectItem>
                    <SelectItem value="15k-30k">€15K - €30K/month</SelectItem>
                    <SelectItem value="30k-50k">€30K - €50K/month</SelectItem>
                    <SelectItem value="50k+">€50K+/month</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label className="text-slate-300">Marketing Team Size</Label>
                <Select
                  value={formData.marketingTeamSize}
                  onValueChange={val => handleFieldChange("marketingTeamSize", val)}
                >
                  <SelectTrigger className="bg-slate-800/50 border-slate-600 text-white">
                    <SelectValue placeholder="Select team size" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="just-me">Just me</SelectItem>
                    <SelectItem value="2-3">2-3 people</SelectItem>
                    <SelectItem value="4-10">4-10 people</SelectItem>
                    <SelectItem value="11-20">11-20 people</SelectItem>
                    <SelectItem value="20+">20+ people</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            <div>
              <Label className="text-slate-300 mb-3 block">Current Marketing Tools (select all that apply)</Label>
              <div className="grid grid-cols-2 gap-2">
                {MARKETING_TOOLS.map(tool => (
                  <Button
                    key={tool}
                    type="button"
                    variant={formData.currentMarketingTools.includes(tool) ? "default" : "outline"}
                    size="sm"
                    onClick={() => {
                      const newTools = formData.currentMarketingTools.includes(tool)
                        ? formData.currentMarketingTools.filter(t => t !== tool)
                        : [...formData.currentMarketingTools, tool];
                      handleFieldChange("currentMarketingTools", newTools);
                    }}
                    className={`text-left justify-start p-3 h-auto ${
                      formData.currentMarketingTools.includes(tool)
                        ? "bg-green-600 text-white"
                        : "bg-slate-800/50 border-slate-600 text-slate-300 hover:bg-slate-700"
                    }`}
                  >
                    {tool}
                  </Button>
                ))}
              </div>
            </div>
          </div>
        );

      case "readiness":
        return (
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label className="text-slate-300">Implementation Timeline</Label>
                <Select
                  value={formData.implementationTimeline}
                  onValueChange={val => handleFieldChange("implementationTimeline", val)}
                >
                  <SelectTrigger className="bg-slate-800/50 border-slate-600 text-white">
                    <SelectValue placeholder="When do you need this?" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="immediately">Immediately</SelectItem>
                    <SelectItem value="1-month">Within 1 month</SelectItem>
                    <SelectItem value="1-3-months">1-3 months</SelectItem>
                    <SelectItem value="3-6-months">3-6 months</SelectItem>
                    <SelectItem value="6-12-months">6-12 months</SelectItem>
                    <SelectItem value="exploring">Just exploring</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label className="text-slate-300">Budget Approval Status</Label>
                <Select
                  value={formData.budgetApproval}
                  onValueChange={val => handleFieldChange("budgetApproval", val)}
                >
                  <SelectTrigger className="bg-slate-800/50 border-slate-600 text-white">
                    <SelectValue placeholder="Budget status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="approved">Budget approved</SelectItem>
                    <SelectItem value="pending">Budget pending approval</SelectItem>
                    <SelectItem value="need-justification">Need to justify budget</SelectItem>
                    <SelectItem value="no-budget">No budget allocated</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label className="text-slate-300">Technical Readiness</Label>
                <Select
                  value={formData.technicalReadiness}
                  onValueChange={val => handleFieldChange("technicalReadiness", val)}
                >
                  <SelectTrigger className="bg-slate-800/50 border-slate-600 text-white">
                    <SelectValue placeholder="Technical capability" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="very-ready">Very technically ready</SelectItem>
                    <SelectItem value="somewhat-ready">Somewhat ready</SelectItem>
                    <SelectItem value="need-help">Need technical help</SelectItem>
                    <SelectItem value="not-ready">Not technically ready</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label className="text-slate-300">Change Management</Label>
                <Select
                  value={formData.changeManagement}
                  onValueChange={val => handleFieldChange("changeManagement", val)}
                >
                  <SelectTrigger className="bg-slate-800/50 border-slate-600 text-white">
                    <SelectValue placeholder="Team readiness for change" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="very-ready">Team is very ready</SelectItem>
                    <SelectItem value="somewhat-ready">Team is somewhat ready</SelectItem>
                    <SelectItem value="need-convincing">Team needs convincing</SelectItem>
                    <SelectItem value="resistance">Expect resistance</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>
        );

      case "additional":
        return (
          <div className="space-y-4">
            <div>
              <Label className="text-slate-300">Additional Information</Label>
              <Textarea
                value={formData.additionalInfo}
                onChange={e => handleFieldChange("additionalInfo", e.target.value)}
                className="bg-slate-800/50 border-slate-600 text-white"
                placeholder="Tell us anything else that would help us understand your needs..."
                rows={4}
              />
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label className="text-slate-300">Preferred Contact Method</Label>
                <Select
                  value={formData.preferredContactMethod}
                  onValueChange={val => handleFieldChange("preferredContactMethod", val)}
                >
                  <SelectTrigger className="bg-slate-800/50 border-slate-600 text-white">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="email">Email</SelectItem>
                    <SelectItem value="phone">Phone</SelectItem>
                    <SelectItem value="video">Video call</SelectItem>
                    <SelectItem value="text">Text message</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label className="text-slate-300">Best Time to Call</Label>
                <Select
                  value={formData.bestTimeToCall}
                  onValueChange={val => handleFieldChange("bestTimeToCall", val)}
                >
                  <SelectTrigger className="bg-slate-800/50 border-slate-600 text-white">
                    <SelectValue placeholder="When should we call?" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="morning">Morning (9-12)</SelectItem>
                    <SelectItem value="afternoon">Afternoon (12-17)</SelectItem>
                    <SelectItem value="evening">Evening (17-20)</SelectItem>
                    <SelectItem value="flexible">Flexible</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            <div className="space-y-3">
              <div className="flex items-start gap-3">
                <input
                  type="checkbox"
                  id="marketingConsent"
                  checked={formData.marketingConsent}
                  onChange={e => handleFieldChange("marketingConsent", e.target.checked)}
                  className="mt-1 rounded border-slate-600 bg-slate-800 text-blue-500"
                />
                <label htmlFor="marketingConsent" className="text-sm text-slate-300 cursor-pointer">
                  I agree to receive marketing communications about {product} and understand I can unsubscribe at any time.
                </label>
              </div>
              
              <div className="flex items-start gap-3">
                <input
                  type="checkbox"
                  id="dataProcessingConsent"
                  checked={formData.dataProcessingConsent}
                  onChange={e => handleFieldChange("dataProcessingConsent", e.target.checked)}
                  className="mt-1 rounded border-slate-600 bg-slate-800 text-blue-500"
                />
                <label htmlFor="dataProcessingConsent" className="text-sm text-slate-300 cursor-pointer">
                  I consent to the processing of my personal data for the purposes of this inquiry and service delivery. *
                </label>
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 border-slate-700">
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold text-white flex items-center gap-2">
            <Sparkles className="w-6 h-6 text-yellow-400" />
            Join {product} Waitlist
          </DialogTitle>
          <DialogDescription className="text-slate-300">
            Help us understand your business needs so we can provide the best possible solution.
          </DialogDescription>
        </DialogHeader>

        <div className="mb-6">
          <div className="flex justify-between text-sm text-slate-400 mb-2">
            <span>Step {currentStep + 1} of {FORM_STEPS.length}</span>
            <span>{Math.round(progress)}% Complete</span>
          </div>
          <Progress value={progress} className="h-2" />
        </div>

        <div className="mb-6">
          <div className="flex items-center gap-3 mb-2">
            <div className="w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center">
              <FORM_STEPS[currentStep].icon className="w-5 h-5 text-white" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-white">
                {FORM_STEPS[currentStep].title}
              </h3>
              <p className="text-sm text-slate-400">
                {FORM_STEPS[currentStep].description}
              </p>
            </div>
          </div>
        </div>

        <div className="mb-6">
          <AnimatePresence mode="wait">
            <motion.div
              key={currentStep}
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              transition={{ duration: 0.3 }}
            >
              {renderStepContent()}
            </motion.div>
          </AnimatePresence>
        </div>

        <div className="flex justify-between pt-6 border-t border-slate-700">
          <Button
            onClick={handlePrev}
            disabled={currentStep === 0}
            variant="outline"
            className="border-slate-600 text-slate-300 hover:bg-slate-800"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Previous
          </Button>

          {currentStep === FORM_STEPS.length - 1 ? (
            <Button
              onClick={handleSubmit}
              disabled={isSubmitting || !formData.dataProcessingConsent}
              className="bg-gradient-to-r from-blue-600 to-purple-600 hover:opacity-90"
            >
              {isSubmitting ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Submitting...
                </>
              ) : (
                <>
                  <CheckCircle className="w-4 h-4 mr-2" />
                  Join Waitlist
                </>
              )}
            </Button>
          ) : (
            <Button
              onClick={handleNext}
              className="bg-gradient-to-r from-blue-600 to-purple-600 hover:opacity-90"
            >
              Next
              <ArrowRight className="w-4 h-4 ml-2" />
            </Button>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
} 