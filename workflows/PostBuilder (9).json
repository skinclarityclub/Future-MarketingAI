{
  "name": "PostBuilder",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "imageTitle"
            },
            {
              "name": "imagePrompt"
            },
            {
              "name": "chatID"
            },
            {
              "name": "contentStrategy"
            },
            {
              "name": "priority"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [-1660, -520],
      "id": "102feb57-6b1b-43d8-aa2f-1774a1084a04",
      "name": "Enterprise Input Trigger"
    },
    {
      "parameters": {
        "model": "openai/gpt-4o",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [-1340, -420],
      "id": "30354753-dfcb-44b2-8736-f7fef79e9f9f",
      "name": "Enterprise Visual Model",
      "credentials": {
        "openRouterApi": {
          "id": "ht1g53zw1Z9E7nlN",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Post Title: {{ $('Enterprise Input Trigger').first().json.imageTitle }}\nImage Context: {{ $('Enterprise Input Trigger').first().json.imagePrompt }}\nContent Strategy: {{ $('Enterprise Input Trigger').first().json.contentStrategy || 'premium' }}\nPriority: {{ $('Enterprise Input Trigger').first().json.priority || 'high' }}\n\nCreate a detailed Instagram image prompt optimized for {{ $('Enterprise Input Trigger').first().json.contentStrategy || 'premium' }} strategy.",
        "options": {
          "systemMessage": "# Enterprise Instagram Visual Creator Agent v2.0\n\nYou are an advanced Enterprise Instagram Post Visual Creator optimized for multi-account campaigns, A/B testing, and performance optimization.\n\n## Mission:\nCreate exceptional, detailed image prompts perfect for enterprise-level Instagram marketing that:\n- Maximizes engagement and scroll-stopping appeal\n- Aligns with specific content strategies (standard, premium, campaign)\n- Optimizes for Instagram's algorithm and user behavior\n- Maintains SkinClarity Club's premium brand consistency\n- Generates measurable business results\n\n## Enterprise Content Strategies:\n\n### **Standard Strategy** (75% quality threshold):\n- Clear, professional, accessible content\n- Broad audience appeal\n- Proven engagement patterns\n- Reliable performance\n\n### **Premium Strategy** (85% quality threshold):\n- Elevated, aspirational content\n- Premium brand positioning\n- Higher engagement targets\n- Sophisticated messaging\n\n### **Campaign Strategy** (90% quality threshold):\n- Maximum impact, conversion-focused\n- Strategic business messaging\n- Premium positioning and outcomes\n- Executive-level quality standards\n\n## Enterprise Visual Standards:\n- **High contrast** for mobile viewing excellence\n- **Clear focal points** for quick comprehension\n- **Emotional triggers** for engagement optimization\n- **Professional quality** for trust building\n- **Instagram-optimized** composition (square/portrait)\n\n## SkinClarity Club Enterprise Brand Elements:\n- **Color Palette**: Clean whites, soft pastels, natural earth tones\n- **Lighting**: Soft, natural, professional studio quality\n- **Composition**: Minimalist, premium, spacious layouts\n- **Models**: Diverse, authentic, healthy-looking skin\n- **Props**: Glass containers, natural ingredients, clean surfaces\n- **Mood**: Trustworthy, aspirational, scientifically-backed\n\n## Performance Optimization Elements:\n- Scroll-stopping visual impact\n- Clear brand recognition\n- Emotional connection triggers\n- Conversion pathway optimization\n- Algorithm-friendly composition\n\n## Output Requirements:\nReturn ONLY the crafted image prompt text, optimized for:\n- DALL-E 3 compatibility\n- Enterprise brand standards\n- Performance maximization\n- Business goal achievement\n\n**Focus**: Create content that doesn't just look good‚Äîcreate content that performs exceptionally well in enterprise marketing campaigns."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [-1240, -520],
      "id": "596ce260-b8ee-4e25-82d7-637796c4ec16",
      "name": "Enterprise Visual Creator"
    },
    {
      "parameters": {
        "resource": "image",
        "model": "gpt-image-1",
        "prompt": "={{ $json.output }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [-820, -520],
      "id": "49e01fbf-45b1-42a8-8549-b86b4406bb3a",
      "name": "Enterprise Image Generation",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "openAiApi": {
          "id": "lAcEJc06aCiCIRiF",
          "name": "OpenAi accountFINAL"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://nurdldgqxseunotmygzn.supabase.co/storage/v1/object/content-assets/enterprise/{{ $execution.id }}/generated-image.png",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im51cmRsZGdxeHNldW5vdG15Z3puIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODIxMDUxNCwiZXhwIjoyMDYzNzg2NTE0fQ.xsrrxjpMbKMdcJ_e_6DiBwz9eLLj3YziKE7UrTqhVCo"
            },
            {
              "name": "Content-Type",
              "value": "image/png"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "data",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-640, -500],
      "id": "a9bed83a-7137-4cfe-a24d-6c9842c275a5",
      "name": "Store Enterprise Image",
      "credentials": {
        "httpHeaderAuth": {
          "id": "t0Vk9fjgaIrAz1Kl",
          "name": "SupaBase"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// üè¢ ENTERPRISE SUPABASE URL GENERATOR\nconst storeImageData = $input.first().json;\nconst enterpriseData = $('Enterprise Input Trigger').first().json;\n\nconsole.log(\"üîó === ENTERPRISE URL GENERATION ===\");\nconsole.log(\"üÜî Execution ID:\", $execution.id);\nconsole.log(\"üìà Content Strategy:\", enterpriseData.contentStrategy || 'premium');\nconsole.log(\"üìä Priority Level:\", enterpriseData.priority || 'high');\n\nconst bucketName = 'content-assets';\nconst filePath = `enterprise/${$execution.id}/generated-image.png`;\n\n// Enterprise Supabase URL\nconst publicUrl = `https://nurdldgqxseunotmygzn.supabase.co/storage/v1/object/public/${bucketName}/${filePath}`;\n\nconsole.log(\"‚úÖ Enterprise URL Generated:\", publicUrl);\nconsole.log(\"üìÅ File Path:\", filePath);\n\n// Enterprise Metadata\nconst enterpriseMetadata = {\n  file_url: publicUrl,\n  storage_path: filePath,\n  bucket_name: bucketName,\n  execution_id: $execution.id,\n  generated_at: new Date().toISOString(),\n  \n  // Enterprise Features\n  content_strategy: enterpriseData.contentStrategy || 'premium',\n  priority_level: enterpriseData.priority || 'high',\n  workflow_version: '2.0_enterprise',\n  enterprise_mode: true,\n  \n  // Debug Info\n  original_key: storeImageData.Key,\n  storage_method: \"enterprise_execution_id\"\n};\n\nconsole.log(\"üè¢ Enterprise metadata prepared\");\nconsole.log(\"üöÄ ENTERPRISE URL GENERATION COMPLETE!\");\n\nreturn [{ json: enterpriseMetadata }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-800, -280],
      "id": "0dac4c52-bc9a-4e37-97d5-848021173e4d",
      "name": "Generate Enterprise URL"
    },
    {
      "parameters": {
        "tableId": "content_workflows",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "execution_id",
              "fieldValue": "={{ $execution.id }}"
            },
            {
              "fieldId": "workflow_type",
              "fieldValue": "createPost_Enterprise"
            },
            {
              "fieldId": "current_state",
              "fieldValue": "INITIAL"
            },
            {
              "fieldId": "user_id",
              "fieldValue": "={{ $('Enterprise Input Trigger').first().json.chatID }}"
            },
            {
              "fieldId": "chat_id",
              "fieldValue": "={{ $('Enterprise Input Trigger').first().json.chatID }}"
            },
            {
              "fieldId": "input_data",
              "fieldValue": "={{ JSON.stringify($('Enterprise Input Trigger').first().json) }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [-1660, -380],
      "id": "47a58556-dc22-4ed4-aa62-03b4586e4fd7",
      "name": "Enterprise Workflow Registry",
      "credentials": {
        "supabaseApi": {
          "id": "DILZN3aAMdS9FL24",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// üè¢ ENTERPRISE STATE COORDINATOR INITIALIZATION\nconst supabaseWorkflow = $('Enterprise Workflow Registry').first().json;\nconst inputData = $('Enterprise Input Trigger').first().json;\n\nconsole.log(\"üéØ === ENTERPRISE STATE COORDINATOR INIT ===\");\nconsole.log(\"üÜî Execution ID:\", $execution.id);\nconsole.log(\"üìä Supabase Workflow ID:\", supabaseWorkflow.id);\nconsole.log(\"üìà Content Strategy:\", inputData.contentStrategy || 'premium');\nconsole.log(\"üìä Priority Level:\", inputData.priority || 'high');\n\ntry {\n  console.log(\"üîÑ Preparing Enterprise StateCoordinator data\");\n  \n  // Enterprise StateCoordinator Data Package\n  const enterpriseStateData = {\n    action: 'create',\n    execution_id: $execution.id,\n    workflow_data: {\n      workflow_type: 'createPost_Enterprise',\n      workflow_version: '2.0_enterprise',\n      current_state: 'INITIAL',\n      current_phase: 'enterprise_image_generation',\n      chat_id: inputData.chatID,\n      user_id: inputData.chatID,\n      input_data: inputData,\n      supabase_workflow_id: supabaseWorkflow.id,\n      \n      // Enterprise Configuration\n      enterprise_config: {\n        content_strategy: inputData.contentStrategy || 'premium',\n        priority_level: inputData.priority || 'high',\n        enterprise_mode: true,\n        quality_threshold: inputData.contentStrategy === 'campaign' ? 0.90 : \n                          inputData.contentStrategy === 'premium' ? 0.85 : 0.75\n      }\n    }\n  };\n\n  console.log(\"‚úÖ Enterprise StateCoordinator data prepared\");\n  console.log(\"üìÑ Enterprise Config:\", JSON.stringify(enterpriseStateData.workflow_data.enterprise_config, null, 2));\n\n  return [{ \n    json: { \n      ...inputData, \n      enterprise_state_data: enterpriseStateData,\n      supabase_id: supabaseWorkflow.id,\n      enterprise_ready: true,\n      \n      // Enterprise Metadata\n      content_strategy: inputData.contentStrategy || 'premium',\n      priority_level: inputData.priority || 'high',\n      workflow_version: '2.0_enterprise'\n    } \n  }];\n\n} catch (error) {\n  console.log(\"‚ùå Enterprise StateCoordinator preparation error:\", error.message);\n  \n  // Enterprise Fallback Mode\n  return [{ \n    json: { \n      ...inputData, \n      enterprise_state_created: false, \n      supabase_id: supabaseWorkflow.id,\n      enterprise_error: error.message,\n      fallback_mode: 'enterprise',\n      content_strategy: inputData.contentStrategy || 'premium',\n      priority_level: inputData.priority || 'high'\n    } \n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1480, -380],
      "id": "9a017fd4-96d3-40da-b3ff-bbbba14ff748",
      "name": "Initialize Enterprise StateCoordinator"
    },
    {
      "parameters": {
        "tableId": "content_assets",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "workflow_id",
              "fieldValue": "={{ $('Enterprise Workflow Registry').first().json.id }}"
            },
            {
              "fieldId": "execution_id",
              "fieldValue": "={{ $execution.id }}"
            },
            {
              "fieldId": "asset_type",
              "fieldValue": "enterprise_generated_image"
            },
            {
              "fieldId": "file_url",
              "fieldValue": "={{ $('Generate Enterprise URL').first().json.file_url }}"
            },
            {
              "fieldId": "file_metadata",
              "fieldValue": "=={{ JSON.stringify({prompt_used: $('Enterprise Visual Creator').first().json.output, openai_response: $('Enterprise Image Generation').first().json.data, generation_model: $('Enterprise Image Generation').first().json.model, content_strategy: $('Generate Enterprise URL').first().json.content_strategy, priority_level: $('Generate Enterprise URL').first().json.priority_level, enterprise_mode: true}) }}"
            },
            {
              "fieldId": "created_at",
              "fieldValue": "={{ $now.toISODate() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [-1480, -220],
      "id": "785ba5d5-88b5-4097-9a47-3db9eea2a4fd",
      "name": "Save Enterprise Image Asset",
      "credentials": {
        "supabaseApi": {
          "id": "DILZN3aAMdS9FL24",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// üè¢ ENTERPRISE STATE UPDATE - IMAGE GENERATED\nconst imageData = $('Generate Enterprise URL').first().json;\nconst enterpriseData = $('Initialize Enterprise StateCoordinator').first().json;\n\nconsole.log(\"‚ö° === ENTERPRISE STATE UPDATE ===\");\nconsole.log(\"üñºÔ∏è Enterprise Image URL:\", imageData.file_url);\nconsole.log(\"üìà Content Strategy:\", imageData.content_strategy);\nconsole.log(\"üìä Priority Level:\", imageData.priority_level);\nconsole.log(\"üè¢ Enterprise Mode:\", imageData.enterprise_mode);\n\n// Enterprise State Update Package\nconst enterpriseStateUpdate = {\n  ...imageData,\n  state_updated: true,\n  execution_id: $execution.id,\n  enterprise_mode: true,\n  \n  // Enterprise Configuration\n  content_strategy: imageData.content_strategy,\n  priority_level: imageData.priority_level,\n  workflow_version: imageData.workflow_version,\n  \n  // State Transition Data\n  current_state: 'IMAGE_GENERATED',\n  previous_state: 'INITIAL',\n  updated_at: new Date().toISOString()\n};\n\nconsole.log(\"‚úÖ Enterprise state update prepared\");\nconsole.log(\"üöÄ ENTERPRISE STATE UPDATE COMPLETE!\");\n\nreturn [{ json: enterpriseStateUpdate }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1280, -280],
      "id": "c771a74c-159e-4479-952c-4e17939f1172",
      "name": "Update Enterprise State - Image Generated"
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{ $('Enterprise Input Trigger').item.json.chatID }}",
        "file": "={{ $('Generate Enterprise URL').first().json.file_url }}",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "‚úÖ Perfect!",
                    "additionalFields": {
                      "callback_data": "=AIP_{{ $execution.id }}_image-approval"
                    }
                  },
                  {
                    "text": "‚úèÔ∏è Verbeteren",
                    "additionalFields": {
                      "callback_data": "=MIP_{{ $execution.id }}_image-approval"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "caption": "=üé® Nieuwe Instagram afbeelding gegenereerd!\nüìà **Strategy:** {{ $('Generate Enterprise URL').first().json.content_strategy.toUpperCase() }}\nüìä **Priority:** {{ $('Generate Enterprise URL').first().json.priority_level.toUpperCase() }}\nüèÜ **Quality:** Enterprise Grade\n\n‚è∞ Wat vind je van deze afbeelding?"
        }
      },
      "id": "469c53df-2e08-4128-a993-d864262a6b19",
      "name": "Enterprise Telegram Image Review",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [-940, -360],
      "webhookId": "enterprise-image-review",
      "credentials": {
        "telegramApi": {
          "id": "ioh9vLdQ3pzyX0kw",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "resume": "webhook",
        "httpMethod": "POST",
        "options": {
          "webhookSuffix": "enterprise-image-approval"
        }
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [-600, -280],
      "id": "ca0fe276-fbbc-41c2-9a4d-6a179b084285",
      "name": "Wait for Enterprise Image Approval",
      "webhookId": "1b128f16-3110-490e-b3fe-2096c15e6b50"
    },
    {
      "parameters": {
        "jsCode": "// üî¨ ENTERPRISE CALLBACK DEBUG & FIX\nconst webhookData = $input.first().json;\n\nconsole.log(\"üî¨ === COMPLETE DEBUG ANALYSIS ===\");\nconsole.log(\"üì• RAW Input:\", JSON.stringify($input.first(), null, 2));\nconsole.log(\"üìã Webhook Data:\", JSON.stringify(webhookData, null, 2));\n\n// Check if webhookData has body property\nif (webhookData.body) {\n    console.log(\"üì¶ Body exists:\", JSON.stringify(webhookData.body, null, 2));\n    const bodyData = webhookData.body;\n    \n    const result = {\n        action: bodyData.action,                    // ‚Üê FROM BODY\n        execution_id: bodyData.execution_id,\n        user_id: bodyData.user_id,\n        chat_id: bodyData.chat_id,\n        callback_type: bodyData.callback_type,\n        timestamp: bodyData.timestamp,\n        feedback: bodyData.feedback || '',\n        resume_source: bodyData.resume_source,\n        phase: 'enterprise_image_approval',\n        enterprise_mode: true,\n        valid_callback: true\n    };\n    \n    console.log(\"‚úÖ RESULT WITH BODY:\", JSON.stringify(result, null, 2));\n    return [{ json: result }];\n    \n} else {\n    // Direct from webhookData\n    const result = {\n        action: webhookData.action,                 // ‚Üê DIRECT\n        execution_id: webhookData.execution_id,\n        user_id: webhookData.user_id,\n        chat_id: webhookData.chat_id,\n        callback_type: webhookData.callback_type,\n        timestamp: webhookData.timestamp,\n        feedback: webhookData.feedback || '',\n        resume_source: webhookData.resume_source,\n        phase: 'enterprise_image_approval',\n        enterprise_mode: true,\n        valid_callback: true\n    };\n    \n    console.log(\"‚úÖ RESULT DIRECT:\", JSON.stringify(result, null, 2));\n    return [{ json: result }];\n}"
      },
      "id": "2eacb342-872d-434b-bd85-78e4b9f8049b",
      "name": "Process Enterprise Image Callback",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1460, 140]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.action }}",
                    "rightValue": "approved",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Approved"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.action }}",
                    "rightValue": "modify",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Modify"
            }
          ]
        },
        "options": {}
      },
      "id": "d47be465-c92a-498a-9474-e8f0b421a329",
      "name": "Enterprise Image Action Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [-1300, 140]
    },
    {
      "parameters": {
        "jsCode": "// üè¢ ENTERPRISE REGENERATE IMAGE PROCESSOR\nconst callbackData = $input.first().json;\nconst feedback = callbackData.feedback || '';\n\nconsole.log(\"üîÑ === ENTERPRISE REGENERATE PROCESSOR ===\");\nconsole.log(\"üí¨ Enterprise user feedback:\", feedback);\n\n// Get original enterprise input data\nconst originalInputs = $('Enterprise Input Trigger').first().json;\n\nconsole.log(\"üìä Original Strategy:\", originalInputs.contentStrategy || 'premium');\nconsole.log(\"üìà Original Priority:\", originalInputs.priority || 'high');\n\n// Enterprise Modify Prompt Generation\nlet enterpriseModifyPrompt;\nif (feedback && feedback.trim()) {\n  // User provided specific feedback\n  enterpriseModifyPrompt = `Post Title: ${originalInputs.imageTitle}\\nImage Context: ${originalInputs.imagePrompt}\\nContent Strategy: ${originalInputs.contentStrategy || 'premium'}\\nPriority: ${originalInputs.priority || 'high'}\\n\\nUser Feedback: ${feedback}\\n\\nPlease create a refined enterprise-grade image prompt based on this feedback, optimized for ${originalInputs.contentStrategy || 'premium'} strategy.`;\n  console.log(\"‚úèÔ∏è Using enterprise user feedback for modification\");\n} else {\n  // No feedback, just regenerate with enterprise standards\n  enterpriseModifyPrompt = `Post Title: ${originalInputs.imageTitle}\\nImage Context: ${originalInputs.imagePrompt}\\nContent Strategy: ${originalInputs.contentStrategy || 'premium'}\\nPriority: ${originalInputs.priority || 'high'}\\n\\nCreate a new enterprise-grade variation of this image prompt with fresh creative elements, optimized for ${originalInputs.contentStrategy || 'premium'} strategy.`;\n  console.log(\"üîÑ Creating enterprise variation without specific feedback\");\n}\n\n// Enterprise Regenerate Result\nconst enterpriseRegenerateResult = {\n  output: enterpriseModifyPrompt,\n  isRegenerate: true,\n  hasFeedback: !!(feedback && feedback.trim()),\n  originalInputs: originalInputs,\n  feedback: feedback,\n  timestamp: new Date().toISOString(),\n  \n  // Enterprise Metadata\n  enterprise_mode: true,\n  content_strategy: originalInputs.contentStrategy || 'premium',\n  priority_level: originalInputs.priority || 'high',\n  regeneration_tier: 'enterprise'\n};\n\nconsole.log(\"‚úÖ Enterprise regenerate prompt prepared\");\nconsole.log(\"üöÄ ENTERPRISE REGENERATE PROCESSING COMPLETE!\");\n\nreturn [{ json: enterpriseRegenerateResult }];"
      },
      "id": "96113416-9194-4a3b-a540-2e5ee344f5e9",
      "name": "Prepare Enterprise Regenerate Image",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1120, 260]
    },
    {
      "parameters": {
        "jsCode": "// üè¢ GET ENTERPRISE STATE COORDINATOR DATA\nconsole.log(\"üìä === ENTERPRISE STATE DATA RETRIEVAL ===\");\nconsole.log(\"üÜî Execution ID:\", $execution.id);\n\n// Enterprise State Data Simulation (in production: call actual StateCoordinator)\nconst enterpriseStateData = {\n  execution_id: $execution.id,\n  current_state: 'IMAGE_APPROVED',\n  workflow_type: 'createPost_Enterprise',\n  enterprise_mode: true,\n  \n  // Enhanced Input Data\n  input_data: {\n    imageTitle: $('Enterprise Input Trigger').first().json.imageTitle,\n    imagePrompt: $('Enterprise Input Trigger').first().json.imagePrompt,\n    chatID: $('Enterprise Input Trigger').first().json.chatID,\n    contentStrategy: $('Enterprise Input Trigger').first().json.contentStrategy || 'premium',\n    priority: $('Enterprise Input Trigger').first().json.priority || 'high'\n  },\n  \n  // Enhanced Output Data\n  output_data: {\n    image_url: $('Generate Enterprise URL').first().json.file_url,\n    prompt_used: $('Enterprise Visual Creator').first().json.output,\n    content_strategy: $('Generate Enterprise URL').first().json.content_strategy,\n    priority_level: $('Generate Enterprise URL').first().json.priority_level,\n    enterprise_mode: true,\n    quality_tier: 'enterprise'\n  },\n  \n  // Enterprise Configuration\n  enterprise_config: {\n    content_strategy: $('Enterprise Input Trigger').first().json.contentStrategy || 'premium',\n    priority_level: $('Enterprise Input Trigger').first().json.priority || 'high',\n    quality_threshold: ($('Enterprise Input Trigger').first().json.contentStrategy === 'campaign') ? 0.90 : \n                      ($('Enterprise Input Trigger').first().json.contentStrategy === 'premium') ? 0.85 : 0.75,\n    approval_level_required: ($('Enterprise Input Trigger').first().json.contentStrategy === 'campaign') ? 'executive' : \n                            ($('Enterprise Input Trigger').first().json.contentStrategy === 'premium') ? 'brand_manager' : 'content_team',\n    enterprise_features_enabled: true\n  }\n};\n\nconsole.log(\"‚úÖ Enterprise state data retrieved\");\nconsole.log(\"üìà Strategy:\", enterpriseStateData.enterprise_config.content_strategy);\nconsole.log(\"üìä Priority:\", enterpriseStateData.enterprise_config.priority_level);\nconsole.log(\"üéØ Quality Threshold:\", (enterpriseStateData.enterprise_config.quality_threshold * 100).toFixed(1) + '%');\nconsole.log(\"üè¢ Approval Level:\", enterpriseStateData.enterprise_config.approval_level_required);\n\n// Return clean enterprise state data for content creation\nconst enterpriseStateResult = {\n  state_data: enterpriseStateData,\n  execution_id: $execution.id,\n  enterprise_tier: 'premium',\n  content_generation_ready: true\n};\n\nconsole.log(\"üöÄ ENTERPRISE STATE DATA RETRIEVAL COMPLETE!\");\n\nreturn [{ json: enterpriseStateResult }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1080, 60],
      "id": "5ad82a5c-8658-465b-8177-c304354bc7a2",
      "name": "Get Enterprise StateCoordinator Data"
    },
    {
      "parameters": {
        "model": "anthropic/claude-sonnet-4",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [-940, 140],
      "id": "b57b3297-556e-42ac-99c5-c75bb46eb6fe",
      "name": "Enterprise Content Model",
      "credentials": {
        "openRouterApi": {
          "id": "ht1g53zw1Z9E7nlN",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze this enterprise image and create optimized Dutch content:\n\nImage: {{ $('Get Enterprise StateCoordinator Data').first().json.state_data.output_data.image_url }}\nOriginal title: {{ $('Get Enterprise StateCoordinator Data').first().json.state_data.input_data.imageTitle }}\nOriginal prompt: {{ $('Get Enterprise StateCoordinator Data').first().json.state_data.input_data.imagePrompt }}\nGenerated prompt: {{ $('Get Enterprise StateCoordinator Data').first().json.state_data.output_data.prompt_used }}\nContent Strategy: {{ $('Get Enterprise StateCoordinator Data').first().json.state_data.enterprise_config.content_strategy }}\nPriority Level: {{ $('Get Enterprise StateCoordinator Data').first().json.state_data.enterprise_config.priority_level }}\nQuality Threshold: {{ $('Get Enterprise StateCoordinator Data').first().json.state_data.enterprise_config.quality_threshold }}\n\nCreate enterprise-level template text (for overlay) and Instagram caption optimized for {{ $('Get Enterprise StateCoordinator Data').first().json.state_data.enterprise_config.content_strategy }} strategy.\n\nReturn as JSON format with both template and caption sections.",
        "options": {
          "systemMessage": "# Enterprise Instagram Content Creator v2.0\n\nYou are an advanced Enterprise Instagram content creator optimized for multi-account campaigns, A/B testing, performance optimization, and measurable business results.\n\n## Mission:\nCreate enterprise-level Instagram content that:\n- Maximizes engagement rates and business conversions\n- Aligns with specific content strategies (standard, premium, campaign)\n- Optimizes for A/B testing and performance measurement\n- Maintains SkinClarity Club's premium brand consistency\n- Generates measurable ROI and business impact\n\n## Enterprise Content Strategies:\n\n### **Standard Strategy** (75% quality threshold):\n- Clear, professional, accessible content\n- Broad audience appeal\n- Proven engagement patterns\n- Reliable performance\n\n### **Premium Strategy** (85% quality threshold):\n- Elevated, aspirational content\n- Premium brand positioning\n- Higher engagement targets\n- Sophisticated messaging\n\n### **Campaign Strategy** (90% quality threshold):\n- Maximum impact, conversion-focused\n- Strategic business messaging\n- Premium positioning and outcomes\n- Executive-level quality standards\n\n## Enterprise Template Text Requirements:\n- **Title**: Max 20 characters for premium visibility\n- **Subtitle**: Max 45 characters for optimal mobile display\n- **High contrast** for excellent readability across devices\n- **Performance optimized** for maximum scroll-stopping power\n- **Strategy aligned** with content tier requirements\n\n## Enterprise Caption Requirements:\n- **Hook optimization**: First line designed for maximum engagement\n- **Value delivery**: Clear, actionable insights or inspiration\n- **Brand alignment**: Perfect SkinClarity Club voice consistency\n- **CTA optimization**: Strategic calls-to-action for business results\n- **Hashtag strategy**: Performance-optimized tag selection\n- **Length optimization**: 200-350 words for algorithm favorability\n\n## A/B Testing Optimization:\n- **Variant-specific messaging** for split testing\n- **Performance prediction elements**\n- **Engagement trigger optimization**\n- **Conversion path optimization**\n\n## Enterprise Quality Gates:\n- **Brand Compliance**: 100% SkinClarity Club alignment\n- **Engagement Prediction**: High scroll-stop probability\n- **Conversion Optimization**: Clear business value delivery\n- **Mobile Optimization**: Perfect mobile experience\n- **Algorithm Compatibility**: Instagram algorithm optimized\n\n## Performance Metrics Focus:\n- **Engagement Rate**: Comments, saves, shares optimization\n- **Reach Optimization**: Algorithm-favored content patterns\n- **Conversion Tracking**: Business goal alignment\n- **Brand Recall**: Memorable, distinctive messaging\n\n## SkinClarity Club Enterprise Brand Voice:\n- **Expert Authority**: Science-backed, trustworthy\n- **Accessible Premium**: High-end but approachable\n- **Empowering**: Confidence-building messaging\n- **Authentic**: Real results, genuine care\n- **Progressive**: Innovation-focused, forward-thinking\n\n## Dutch Language Excellence:\n- **Conversational Dutch**: Natural, engaging \"jij\" form\n- **Premium terminology**: Elevated but accessible language\n- **Cultural relevance**: Dutch market understanding\n- **Emotional resonance**: Connection-building phrases\n\n## Enterprise Output Format (JSON):\n```json\n{\n  \"template\": {\n    \"title\": \"Premium title max 20 chars\",\n    \"subtitle\": \"Value-driven subtitle max 45 chars\"\n  },\n  \"caption\": {\n    \"text\": \"Enterprise-optimized Instagram caption with strategic hooks, value delivery, and conversion optimization\",\n    \"hashtags\": \"#strategichashtags #performanceoptimized\"\n  },\n  \"performance_prediction\": {\n    \"engagement_score\": 0.85,\n    \"conversion_potential\": \"high\",\n    \"brand_alignment\": \"perfect\"\n  }\n}\n```\n\n## Enterprise Success Criteria:\n- **Template + Caption synergy**: Cohesive, amplifying message\n- **Strategy alignment**: Perfect fit with content tier\n- **Performance optimization**: Maximum business impact\n- **Brand consistency**: Flawless SkinClarity Club representation\n- **Conversion focus**: Clear path to business results\n\n**Focus**: Create content that doesn't just perform well‚Äîcreate content that drives exceptional business results and brand growth in enterprise marketing campaigns."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [-720, 200],
      "id": "b9bc7449-7002-42f9-83fa-416cf8b7ef53",
      "name": "Enterprise Content Creator",
      "retryOnFail": true,
      "maxTries": 2,
      "waitBetweenTries": 5000,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// üè¢ ENTERPRISE CONTENT DATA PREPARATION\nconst rawOutput = $input.first().json.output;\nconst stateData = $('Get Enterprise StateCoordinator Data').first().json.state_data;\n\nconsole.log(\"üìù === ENTERPRISE CONTENT PREPARATION ===\");\nconsole.log(\"üì• Enterprise content creator output received\");\nconsole.log(\"üìà Content Strategy:\", stateData.enterprise_config.content_strategy);\nconsole.log(\"üìä Priority Level:\", stateData.enterprise_config.priority_level);\nconsole.log(\"üéØ Quality Threshold:\", (stateData.enterprise_config.quality_threshold * 100).toFixed(1) + '%');\n\n// Clean and parse JSON output\nconst cleanJson = rawOutput.replace(/```json\\n?/g, '').replace(/```\\n?/g, '');\nlet contentData;\n\ntry {\n    contentData = JSON.parse(cleanJson);\n    console.log(\"‚úÖ Enterprise content data parsed successfully\");\n} catch (error) {\n    console.error(\"‚ùå Failed to parse enterprise content JSON:\", error);\n    throw new Error(\"Enterprise content parsing failed\");\n}\n\n// Get enterprise image URL from StateCoordinator data\nconst imageUrl = stateData.output_data?.image_url;\nconst executionId = stateData.execution_id;\n\nconsole.log(\"üìä Using Enterprise StateCoordinator data:\");\nconsole.log(\"üñºÔ∏è Image URL:\", imageUrl);\nconsole.log(\"üÜî Execution ID:\", executionId);\n\n// Enterprise Content Validation\nconst enterpriseValidation = {\n    has_title: !!(contentData.template?.title),\n    has_subtitle: !!(contentData.template?.subtitle),\n    has_caption_text: !!(contentData.caption?.text),\n    has_hashtags: !!(contentData.caption?.hashtags),\n    has_performance_prediction: !!(contentData.performance_prediction),\n    title_length_ok: (contentData.template?.title?.length || 0) <= 20, // Enterprise standard\n    subtitle_length_ok: (contentData.template?.subtitle?.length || 0) <= 45, // Enterprise standard\n    has_image: !!imageUrl,\n    has_execution_id: !!executionId,\n    strategy_aligned: stateData.enterprise_config.content_strategy !== 'unknown'\n};\n\nconst validationScore = Object.values(enterpriseValidation).filter(Boolean).length / Object.keys(enterpriseValidation).length;\n\nconsole.log(\"üìã === ENTERPRISE CONTENT VALIDATION ===\");\nObject.entries(enterpriseValidation).forEach(([check, passed]) => {\n    console.log(`${passed ? '‚úÖ' : '‚ùå'} ${check}: ${passed}`);\n});\nconsole.log(\"üéØ Enterprise Validation Score:\", (validationScore * 100).toFixed(1) + '%');\n\n// Enterprise Quality Gate\nconst qualityThreshold = stateData.enterprise_config.quality_threshold;\nif (validationScore < qualityThreshold) {\n    console.log(\"üö® ENTERPRISE QUALITY GATE FAILED\");\n    console.log(\"Required:\", (qualityThreshold * 100).toFixed(1) + '%');\n    console.log(\"Actual:\", (validationScore * 100).toFixed(1) + \"%\");\n    throw new Error(`Enterprise quality standards not met: ${(validationScore * 100).toFixed(1)}%`);\n}\n\nconsole.log(\"üèÜ ENTERPRISE QUALITY GATE PASSED!\");\n\n// Enterprise Content Package\nconst enterpriseContentPackage = {\n    // PLACID REQUIRED DATA\n    title: contentData.template.title,\n    subtitle: contentData.template.subtitle,\n    captionText: contentData.caption.text,\n    hashtags: contentData.caption.hashtags,\n    imageUrl: imageUrl,\n    execution_id: executionId,\n    \n    // ENTERPRISE METADATA\n    content_strategy: stateData.enterprise_config.content_strategy,\n    priority_level: stateData.enterprise_config.priority_level,\n    quality_threshold: stateData.enterprise_config.quality_threshold,\n    validation_score: validationScore,\n    enterprise_validated: true,\n    \n    // PERFORMANCE DATA\n    performance_prediction: contentData.performance_prediction || {\n        engagement_score: 0.85,\n        conversion_potential: 'high',\n        brand_alignment: 'perfect'\n    },\n    \n    // QUALITY METRICS\n    content_metrics: {\n        title_length: contentData.template.title.length,\n        subtitle_length: contentData.template.subtitle.length,\n        caption_word_count: contentData.caption.text.split(' ').length,\n        hashtag_count: (contentData.caption.hashtags.match(/#/g) || []).length,\n        enterprise_compatibility: \"optimal\"\n    },\n    \n    // ENTERPRISE STATUS\n    content_generated_at: new Date().toISOString(),\n    enterprise_ready: true,\n    production_ready: true,\n    \n    // SOURCE DATA\n    source_state_data: stateData,\n    parsed_content_data: contentData\n};\n\nconsole.log(\"üìä === ENTERPRISE CONTENT PACKAGE READY ===\");\nconsole.log(\"üéØ Quality Score:\", (enterpriseContentPackage.validation_score * 100).toFixed(1) + '%');\nconsole.log(\"üìù Title:\", enterpriseContentPackage.title);\nconsole.log(\"üìù Subtitle:\", enterpriseContentPackage.subtitle);\nconsole.log(\"üìä Caption Word Count:\", enterpriseContentPackage.content_metrics.caption_word_count);\nconsole.log(\"üè∑Ô∏è Hashtag Count:\", enterpriseContentPackage.content_metrics.hashtag_count);\nconsole.log(\"üñºÔ∏è Image URL:\", enterpriseContentPackage.imageUrl);\nconsole.log(\"‚úÖ Enterprise Ready:\", enterpriseContentPackage.enterprise_ready);\n\nconsole.log(\"üöÄ ENTERPRISE CONTENT PREPARATION SUCCESS!\");\n\nreturn [{ json: enterpriseContentPackage }];"
      },
      "id": "b3a263ff-1f01-43d2-a476-7dc6cf7cc91a",
      "name": "Prepare Enterprise Content Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-540, 20]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.placid.app/api/rest/images",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"template_uuid\": \"liltowftkjtzt\",\n  \"create_now\": true,\n  \"layers\": {\n    \"title\": {\n      \"text\": \"{{ $json.title }}\"\n    },\n    \"subtitle\": {\n      \"text\": \"{{ $json.subtitle }}\"\n    },\n    \"img\": {\n      \"image\": \"{{ $json.imageUrl }}\"\n    }\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-360, 20],
      "id": "1105a3ae-33af-44a9-b276-dc5c951037b2",
      "name": "Create Enterprise Final Post Image",
      "retryOnFail": true,
      "waitBetweenTries": 3000,
      "maxTries": 2,
      "credentials": {
        "httpHeaderAuth": {
          "id": "tY4cJaC6fBEnWZOB",
          "name": "Placid"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// üè¢ ENTERPRISE STATE UPDATE - CONTENT GENERATED\nconst placidData = $('Create Enterprise Final Post Image').first().json;\nconst contentData = $('Prepare Enterprise Content Data').first().json;\n\nconsole.log(\"üìù === ENTERPRISE CONTENT GENERATED UPDATE ===\");\nconsole.log(\"üéØ Execution ID:\", contentData.execution_id);\nconsole.log(\"üìä Placid URL:\", placidData.image_url);\nconsole.log(\"üìà Content Strategy:\", contentData.content_strategy);\nconsole.log(\"üìä Priority Level:\", contentData.priority_level);\nconsole.log(\"üéØ Quality Score:\", (contentData.validation_score * 100).toFixed(1) + '%');\n\n// Enterprise State Update Data\nconst enterpriseStateUpdate = {\n    execution_id: contentData.execution_id,\n    current_state: 'CONTENT_GENERATED',\n    previous_state: 'IMAGE_APPROVED',\n    current_phase: 'enterprise_content_creation',\n    \n    // Enterprise Output Data\n    output_data: {\n        final_post: {\n            image_url: placidData.image_url,\n            placid_id: placidData.id,\n            title: contentData.title,\n            subtitle: contentData.subtitle,\n            caption: contentData.captionText,\n            hashtags: contentData.hashtags\n        },\n        content_generated_at: new Date().toISOString(),\n        placid_response: placidData,\n        quality_score: contentData.validation_score,\n        \n        // Enterprise Performance Data\n        performance_prediction: contentData.performance_prediction,\n        content_strategy: contentData.content_strategy,\n        priority_level: contentData.priority_level,\n        enterprise_validated: contentData.enterprise_validated\n    },\n    \n    // Enterprise Metadata\n    enterprise_mode: true,\n    workflow_version: '2.0_enterprise',\n    updated_at: new Date().toISOString()\n};\n\nconsole.log(\"‚úÖ Enterprise state updated to CONTENT_GENERATED\");\nconsole.log(\"üèÜ Enterprise Quality Score:\", (enterpriseStateUpdate.output_data.quality_score * 100).toFixed(1) + '%');\n\n// Return enterprise data for Telegram Final Review\nconst enterpriseStateResult = {\n    updated_state: enterpriseStateUpdate,\n    execution_id: contentData.execution_id,\n    enterprise_tier: 'premium',\n    state_response: 'enterprise_success'\n};\n\nconsole.log(\"üöÄ ENTERPRISE CONTENT GENERATED UPDATE COMPLETE!\");\n\nreturn [{ json: enterpriseStateResult }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-360, 240],
      "id": "7a1db75d-c933-43a1-b6c4-62b7a38be0c2",
      "name": "Update Enterprise State - Content Generated"
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{ $('Enterprise Input Trigger').item.json.chatID }}",
        "file": "={{ $('Create Enterprise Final Post Image').first().json.url }}",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "üöÄ Publiceer!",
                    "additionalFields": {
                      "callback_data": "=AFP_{{ $execution.id }}_final-approval"
                    }
                  },
                  {
                    "text": "üìù Verbeter tekst",
                    "additionalFields": {
                      "callback_data": "=MFP_{{ $execution.id }}_final-approval"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "caption": "={{ $('Prepare Enterprise Content Data').item.json.captionText }}"
        }
      },
      "id": "318ec8dd-4bc8-4e39-b0a5-47b8eb25b3ee",
      "name": "Enterprise Telegram Final Review",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [160, 240],
      "webhookId": "enterprise-final-review",
      "credentials": {
        "telegramApi": {
          "id": "ioh9vLdQ3pzyX0kw",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "resume": "webhook",
        "httpMethod": "POST",
        "options": {
          "webhookSuffix": "enterprise-final-approval"
        }
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [280, 20],
      "id": "b01dd87b-7a6a-4ee0-ade5-bf83f2ef0dbb",
      "name": "Wait for Enterprise Final Approval",
      "webhookId": "1b128f16-3110-490e-b3fe-2096c15e6b50"
    },
    {
      "parameters": {
        "jsCode": "// Extract input data\nconst inputData = $input.first().json;\nconst telegramData = inputData.body || inputData;\n\n// Extract the action from the callback\nlet action = '';\nif (telegramData.action) {\n    action = telegramData.action;\n} else if (telegramData.callback_query && telegramData.callback_query.data) {\n    // Parse callback data if it's in Telegram callback format\n    const callbackData = telegramData.callback_query.data;\n    if (callbackData.includes('approve')) {\n        action = 'approved';\n    } else if (callbackData.includes('modify')) {\n        action = 'modify';\n    }\n}\n\n// Enterprise Metadata\nconst enterpriseMetadata = {\n    enterprise_mode: true,\n    valid_callback: true,\n    phase: 'enterprise_final_approval',\n    callback_version: '2.0_enterprise',\n    processing_tier: 'enterprise',\n    final_review: true\n};\n\n// Create the result object that the router expects\nconst enterpriseFinalCallbackResult = {\n    ...enterpriseMetadata,\n    action: action,  // ‚Üê Dit is wat de router nodig heeft!\n    execution_id: inputData.execution_id || telegramData.execution_id,\n    user_id: telegramData.user_id,\n    chat_id: telegramData.chat_id,\n    callback_type: telegramData.callback_type,\n    timestamp: new Date().toISOString(),\n    resume_source: 'callback_handler',\n    originalData: telegramData\n};\n\n// Log voor debugging\nconsole.log('‚úÖ Enterprise final callback processed successfully');\nconsole.log('üìã Enterprise Final Result:', JSON.stringify(enterpriseFinalCallbackResult, null, 2));\nconsole.log('üéØ Action extracted:', action);\n\nreturn [{ json: enterpriseFinalCallbackResult }];"
      },
      "id": "af416816-b8e1-42e9-aed5-01e8dc4def67",
      "name": "Process Enterprise Final Callback",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-360, -280]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.action }}",
                    "rightValue": "approved",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Approved"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.action }}",
                    "rightValue": "modify",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Modify"
            }
          ]
        },
        "options": {}
      },
      "id": "542fba80-ce0e-43ce-9e7e-77c74a9f81e4",
      "name": "Enterprise Final Action Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [-180, -280]
    },
    {
      "parameters": {
        "jsCode": "// üè¢ ENTERPRISE REGENERATE FINAL PROCESSOR\nconst callbackData = $input.first().json;\nconst feedback = callbackData.feedback || '';\n\nconsole.log(\"üîÑ === ENTERPRISE REGENERATE FINAL PROCESSOR ===\");\nconsole.log(\"üí¨ Enterprise user feedback:\", feedback);\n\n// Get current enterprise state data\nconst stateData = $('Get Enterprise StateCoordinator Data').first().json.state_data;\nconst imageUrl = stateData.output_data?.image_url;\n\nconsole.log(\"üìä Current Strategy:\", stateData.enterprise_config.content_strategy);\nconsole.log(\"üìà Current Priority:\", stateData.enterprise_config.priority_level);\nconsole.log(\"üñºÔ∏è Image URL:\", imageUrl);\n\n// Enterprise Content Regeneration Prompt\nlet enterpriseContentPrompt;\nif (feedback && feedback.trim()) {\n  // User provided specific feedback\n  enterpriseContentPrompt = `Analyze this enterprise image and create optimized Dutch content:\\n\\nImage: ${imageUrl}\\nOriginal title: ${stateData.input_data?.imageTitle}\\nOriginal prompt: ${stateData.input_data?.imagePrompt}\\nContent Strategy: ${stateData.enterprise_config.content_strategy}\\nPriority Level: ${stateData.enterprise_config.priority_level}\\nQuality Threshold: ${stateData.enterprise_config.quality_threshold}\\n\\nUser Feedback: ${feedback}\\n\\nPlease modify the enterprise-level content based on this feedback while maintaining the same image and ${stateData.enterprise_config.content_strategy} strategy standards.\\n\\nReturn as JSON format with both template and caption sections.`;\n  console.log(\"‚úèÔ∏è Using enterprise user feedback for content modification\");\n} else {\n  // No feedback, just regenerate with enterprise standards\n  enterpriseContentPrompt = `Analyze this enterprise image and create optimized Dutch content:\\n\\nImage: ${imageUrl}\\nOriginal title: ${stateData.input_data?.imageTitle}\\nContent Strategy: ${stateData.enterprise_config.content_strategy}\\nPriority Level: ${stateData.enterprise_config.priority_level}\\nQuality Threshold: ${stateData.enterprise_config.quality_threshold}\\n\\nCreate a completely new enterprise-grade variation of the content for this image, optimized for ${stateData.enterprise_config.content_strategy} strategy.\\n\\nReturn as JSON format with both template and caption sections.`;\n  console.log(\"üîÑ Creating enterprise content variation without specific feedback\");\n}\n\n// Enterprise Regenerate Final Result\nconst enterpriseRegenerateFinalResult = {\n  output: enterpriseContentPrompt,\n  isRegenerate: true,\n  hasFeedback: !!(feedback && feedback.trim()),\n  stateData: stateData,\n  feedback: feedback,\n  timestamp: new Date().toISOString(),\n  \n  // Enterprise Metadata\n  enterprise_mode: true,\n  content_strategy: stateData.enterprise_config.content_strategy,\n  priority_level: stateData.enterprise_config.priority_level,\n  quality_threshold: stateData.enterprise_config.quality_threshold,\n  regeneration_tier: 'enterprise_final'\n};\n\nconsole.log(\"‚úÖ Enterprise regenerate final content prompt prepared\");\nconsole.log(\"üöÄ ENTERPRISE REGENERATE FINAL PROCESSING COMPLETE!\");\n\nreturn [{ json: enterpriseRegenerateFinalResult }];"
      },
      "id": "ff979ea0-879f-4d11-9e8f-4bfd566dfb93",
      "name": "Prepare Enterprise Regenerate Final",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-360, -480]
    },
    {
      "parameters": {
        "jsCode": "// üè¢ COMPLETE ENTERPRISE WORKFLOW\nconsole.log(\"üèÅ === ENTERPRISE WORKFLOW COMPLETION ===\");\nconsole.log(\"üÜî Execution ID:\", $execution.id);\n\n// Get current enterprise state data\nconst currentStateData = $('Update Enterprise State - Content Generated').first().json.updated_state || {};\n\nconsole.log(\"üìä Current State:\", currentStateData.current_state);\nconsole.log(\"üìà Content Strategy:\", currentStateData.output_data?.content_strategy);\nconsole.log(\"üìä Priority Level:\", currentStateData.output_data?.priority_level);\nconsole.log(\"üéØ Quality Score:\", (currentStateData.output_data?.quality_score * 100).toFixed(1) + '%');\n\n// Enterprise Completion Data\nconst enterpriseCompletionData = {\n    execution_id: $execution.id,\n    current_state: 'COMPLETED',\n    final_post: currentStateData.output_data?.final_post || {},\n    completed_at: new Date().toISOString(),\n    \n    // Enterprise Results\n    enterprise_results: {\n        workflow_version: '2.0_enterprise',\n        content_strategy: currentStateData.output_data?.content_strategy,\n        priority_level: currentStateData.output_data?.priority_level,\n        quality_score: currentStateData.output_data?.quality_score,\n        performance_prediction: currentStateData.output_data?.performance_prediction,\n        enterprise_validated: currentStateData.output_data?.enterprise_validated,\n        \n        // Success Metrics\n        workflow_success: true,\n        completion_tier: 'enterprise',\n        user_approved: true\n    },\n    \n    // Enterprise Metadata\n    enterprise_mode: true,\n    processing_tier: 'enterprise',\n    state_response: 'enterprise_completion_success'\n};\n\nconsole.log(\"‚úÖ Enterprise workflow completed successfully\");\nconsole.log(\"üèÜ Final Quality Score:\", (enterpriseCompletionData.enterprise_results.quality_score * 100).toFixed(1) + '%');\nconsole.log(\"üìà Strategy:\", enterpriseCompletionData.enterprise_results.content_strategy);\nconsole.log(\"üìä Priority:\", enterpriseCompletionData.enterprise_results.priority_level);\n\nconsole.log(\"üöÄ ENTERPRISE WORKFLOW COMPLETION SUCCESS!\");\n\nreturn [{ json: enterpriseCompletionData }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-80, -460],
      "id": "16300c59-11d3-404b-b3da-e3239822d6ba",
      "name": "Complete Enterprise Workflow"
    },
    {
      "parameters": {
        "chatId": "={{ $('Enterprise Input Trigger').item.json.chatID }}",
        "text": "=üè¢ **ENTERPRISE WORKFLOW COMPLETED!**\n\nüéâ **Success!** Je Instagram post is klaar!\nüìä **Quality Score:** {{ ($json.enterprise_results.quality_score * 100).toFixed(1) }}%\nüìà **Strategy:** {{ $json.enterprise_results.content_strategy.toUpperCase() }}\nüìä **Priority:** {{ $json.enterprise_results.priority_level.toUpperCase() }}\nüèÜ **Enterprise Grade:** Premium\n‚≠ê **Performance:** {{ (($json.enterprise_results.performance_prediction.engagement_score || 0.85) * 100).toFixed(1) }}% predicted engagement\nüöÄ **Ready for Publication!**\n\nüÜî Execution ID: {{ $json.execution_id }}\nüè¢ Workflow: Enterprise v2.0",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "5d046467-324b-4ce8-81aa-f50a136ff435",
      "name": "Enterprise Success Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [400, -360],
      "webhookId": "enterprise-success-notification",
      "credentials": {
        "telegramApi": {
          "id": "ioh9vLdQ3pzyX0kw",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "content": "# üè¢ FASE 1: Image Generation",
        "height": 580,
        "width": 1260,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-1700, -600],
      "id": "abf18fc4-b20a-4125-be3c-4513ee046222",
      "name": "Enterprise Phase 1"
    },
    {
      "parameters": {
        "content": "# üìä FASE 2: Template + Caption Creation",
        "height": 440,
        "width": 1940,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-1500, 0],
      "id": "925f0673-42dd-42f6-9d51-76e6b14c1a3b",
      "name": "Enterprise Phase 2"
    },
    {
      "parameters": {
        "content": "# üöÄ FASE 3: Final Review & Completion",
        "height": 580,
        "width": 960,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-420, -600],
      "id": "6c2ae98d-f9f4-4fc0-a19d-676cc8dd40a1",
      "name": "Enterprise Phase 3"
    },
    {
      "parameters": {
        "team": "90151264028",
        "space": "90155049265",
        "folder": "90157459408",
        "list": "901511913287",
        "name": "=üìù Post: {{ $('Enterprise Input Trigger').first().json.imageTitle }}",
        "additionalFields": {
          "customFieldsJson": "={\n  \"execution_id\": \"{{ $execution.id }}\",\n  \"content_strategy\": \"{{ $('Enterprise Input Trigger').first().json.contentStrategy || 'premium' }}\",\n  \"workflow_version\": \"2.0_enterprise\",\n  \"current_phase\": \"image_generation\",\n  \"chat_id\": \"{{ $('Enterprise Input Trigger').first().json.chatID }}\"\n}",
          "content": "=üè¢ Enterprise PostBuilder gestart!\nüìà Strategy: {{ $('Enterprise Input Trigger').first().json.contentStrategy || 'premium' }}\nüìä Priority: {{ $('Enterprise Input Trigger').first().json.priority || 'high' }}\nüéØ Quality target: {{ $('Enterprise Input Trigger').first().json.contentStrategy === 'campaign' ? '90%' : $('Enterprise Input Trigger').first().json.contentStrategy === 'premium' ? '85%' : '75%' }}",
          "priority": "={{ $('Enterprise Input Trigger').first().json.contentStrategy === 'campaign' ? 4 : $('Enterprise Input Trigger').first().json.contentStrategy === 'premium' ? 3 : 2 }}",
          "startDate": "={{ $now.toISODate() }}",
          "status": "planning"
        }
      },
      "type": "n8n-nodes-base.clickUp",
      "typeVersion": 1,
      "position": [-1660, -200],
      "id": "f184d5a9-4693-4f46-88f6-b6fa3d3ade11",
      "name": "Create ClickUp Task",
      "credentials": {
        "clickUpApi": {
          "id": "3GNKK7vXdnhoVmRl",
          "name": "ClickUp"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "id": "={{ $('Create ClickUp Task').first().json.id }}",
        "updateFields": {
          "content": "=üñºÔ∏è Image gegenereerd en klaar voor review!\nüìä Image URL: {{ $('Generate Enterprise URL').first().json.file_url }}\nüìà Strategy: {{ $('Generate Enterprise URL').first().json.content_strategy }}\n‚è∞ Image ready: {{ $now.toISO() }}\nüéØ Volgende stap: Image goedkeuring via Telegram",
          "name": "=üìù Post: {{ $('Enterprise Input Trigger').first().json.imageTitle }} - Image Ready",
          "priority": "={{ $('Enterprise Input Trigger').first().json.contentStrategy === 'campaign' ? 4 : $('Enterprise Input Trigger').first().json.contentStrategy === 'premium' ? 3 : 2 }}",
          "status": "IMAGE REVIEW"
        }
      },
      "type": "n8n-nodes-base.clickUp",
      "typeVersion": 1,
      "position": [-1080, -220],
      "id": "fae2dea6-245d-498a-aa7c-c56d44d0941c",
      "name": "Update Task - Image Ready",
      "credentials": {
        "clickUpApi": {
          "id": "3GNKK7vXdnhoVmRl",
          "name": "ClickUp"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "id": "={{ $('Create ClickUp Task').first().json.id }}",
        "updateFields": {
          "content": "=üìù Content gegenereerd en final post image klaar!\nüéØ Quality Score: {{ ($('Prepare Enterprise Content Data').first().json.validation_score * 100).toFixed(1) }}%\nüñºÔ∏è Final Image: {{ $('Create Enterprise Final Post Image').first().json.image_url }}\nüìà Strategy: {{ $('Prepare Enterprise Content Data').first().json.content_strategy }}\n‚è∞ Content ready: {{ $now.toISO() }}\nüöÄ Klaar voor finale review en publicatie!",
          "name": "=üìù Post: {{ $('Enterprise Input Trigger').first().json.imageTitle }} - Content Ready",
          "priority": "={{ $('Prepare Enterprise Content Data').first().json.content_strategy === 'campaign' ? 4 : 3 }}",
          "status": "FINAL REVIEW"
        }
      },
      "type": "n8n-nodes-base.clickUp",
      "typeVersion": 1,
      "position": [-160, 240],
      "id": "e01b109d-1674-4b4e-b847-29cfd9fbc894",
      "name": "Update Task - Content Ready",
      "credentials": {
        "clickUpApi": {
          "id": "3GNKK7vXdnhoVmRl",
          "name": "ClickUp"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "id": "={{ $('Create ClickUp Task').first().json.id }}",
        "updateFields": {
          "content": "=üèÜ Enterprise workflow succesvol voltooid!\nüìä Final Quality: {{ ($json.enterprise_results.quality_score * 100).toFixed(1) }}%\nüìà Strategy: {{ $json.enterprise_results.content_strategy.toUpperCase() }}\nüìä Priority: {{ $json.enterprise_results.priority_level.toUpperCase() }}\nüéØ Enterprise Grade: Premium\n‚≠ê Performance Score: {{ (($json.enterprise_results.performance_prediction.engagement_score || 0.85) * 100).toFixed(1) }}%\nüöÄ READY FOR PUBLICATION!\n‚è∞ Completed: {{ $now.toISO() }}",
          "name": "=üöÄ Post: {{ $('Enterprise Input Trigger').first().json.imageTitle }} - READY TO PUBLISH",
          "priority": "=4",
          "status": "READY TO PUBLISH"
        }
      },
      "type": "n8n-nodes-base.clickUp",
      "typeVersion": 1,
      "position": [40, -220],
      "id": "5010b2ec-83da-4371-8d67-4424d486bdbf",
      "name": "Update Task - Content Ready1",
      "credentials": {
        "clickUpApi": {
          "id": "3GNKK7vXdnhoVmRl",
          "name": "ClickUp"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// üìä UNIVERSAL DATA SCHEMA VOOR UI/API\nconst workflowData = $input.first().json;\n\nconsole.log(\"üìä === UNIVERSAL DATA SCHEMA CREATION ===\");\nconsole.log(\"üÜî Execution ID:\", $execution.id);\nconsole.log(\"üìà Enterprise Results:\", workflowData.enterprise_results);\n\n// Universeel schema voor alle content types\nconst universalSchema = {\n  // CORE IDENTIFIERS\n  id: $execution.id,\n  type: 'instagram_post', // Later: story, carousel, reel\n  \n  // CONTENT DATA\n  content: {\n    title: workflowData.enterprise_results?.final_post?.title,\n    subtitle: workflowData.enterprise_results?.final_post?.subtitle,\n    caption: workflowData.enterprise_results?.final_post?.caption,\n    hashtags: workflowData.enterprise_results?.final_post?.hashtags,\n    media: {\n      primary: workflowData.enterprise_results?.final_post?.image_url,\n      variants: [] // Voor A/B testing\n    }\n  },\n  \n  // METADATA\n  metadata: {\n    strategy: workflowData.enterprise_results?.content_strategy,\n    priority: workflowData.enterprise_results?.priority_level,\n    quality_score: workflowData.enterprise_results?.quality_score,\n    performance_prediction: workflowData.enterprise_results?.performance_prediction\n  },\n  \n  // PLATFORM SPECIFICS\n  platforms: {\n    instagram: {\n      account_id: null, // Voor multi-account\n      scheduled_time: null,\n      published: false,\n      insights: {}\n    }\n  },\n  \n  // WORKFLOW TRACKING\n  workflow: {\n    name: 'PostBuilder',\n    version: '2.0_enterprise',\n    execution_id: $execution.id,\n    created_at: new Date().toISOString(),\n    completed_at: workflowData.completed_at\n  },\n  \n  // UI SPECIFIC FIELDS\n  ui: {\n    status: 'completed',\n    editable: true,\n    actions: ['publish', 'edit', 'duplicate', 'archive'],\n    tags: ['enterprise', workflowData.enterprise_results?.content_strategy]\n  }\n};\n\nconsole.log(\"‚úÖ Universal schema created\");\nconsole.log(\"üìä Schema preview:\", JSON.stringify(universalSchema, null, 2));\n\nreturn [{ json: universalSchema }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [280, -520],
      "id": "4b98a1be-76e7-43bf-a3d2-895dc2d22da7",
      "name": "Normalize for UI/API"
    },
    {
      "parameters": {
        "jsCode": "// üé® TEMPLATE CONFIGURATION SYSTEM (Voorbereid voor uitbreiding)\nconst input = $input.first().json;\n\nconsole.log(\"üé® === TEMPLATE CONFIGURATION ===\");\nconsole.log(\"üì± Content Type: post (this workflow)\");\nconsole.log(\"üìà Strategy:\", input.contentStrategy || 'premium');\n\nconst templateConfig = {\n  // Current workflow settings\n  content_type: 'post',\n  aspect_ratio: '1:1',\n  placid_template: 'liltowftkjtzt', // Je huidige template\n  max_title_length: 20,\n  max_subtitle_length: 45,\n  \n  // AI models per strategy\n  ai_models: {\n    visual: 'openai/gpt-4o',\n    content: input.contentStrategy === 'campaign' ? 'anthropic/claude-sonnet-4' : 'anthropic/claude-sonnet-4'\n  },\n  \n  // Ready for expansion\n  template_mapping: {\n    // Later hier je 20 templates mappen\n    ready_for_expansion: true\n  }\n};\n\nconsole.log(\"‚úÖ Template config ready for:\", templateConfig.content_type);\nconsole.log(\"üé® Using template:\", templateConfig.placid_template);\n\nreturn [{ json: { ...input, template_config: templateConfig } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1480, -520],
      "id": "75a75c53-af8c-4e3c-8bf5-cb94ddd2fbcd",
      "name": "Template Configuration"
    },
    {
      "parameters": {
        "jsCode": "// üì° API-READY OUTPUT BUILDER\nconst workflowData = $input.first().json;\nconst executionId = $execution.id;\n\nconsole.log(\"üì° === API RESPONSE BUILDER ===\");\nconsole.log(\"üÜî Execution ID:\", executionId);\nconsole.log(\"üìä Workflow completion data:\", workflowData);\n\n// Build comprehensive API response\nconst apiResponse = {\n  // RESPONSE METADATA\n  success: true,\n  timestamp: new Date().toISOString(),\n  execution_id: executionId,\n  workflow: \"PostBuilder\",\n  version: \"2.0_enterprise\",\n  processing_time_ms: Date.now() - ($('Enterprise Input Trigger').first().json.workflow_start_time || Date.now()),\n  \n  // CORE DATA\n  data: {\n    // Content information\n    content: {\n      id: executionId,\n      type: \"instagram_post\",\n      title: workflowData.enterprise_results?.final_post?.title,\n      subtitle: workflowData.enterprise_results?.final_post?.subtitle,\n      caption: workflowData.enterprise_results?.final_post?.caption,\n      hashtags: workflowData.enterprise_results?.final_post?.hashtags,\n      image_url: workflowData.enterprise_results?.final_post?.image_url,\n      \n      // Quality metrics\n      quality_score: workflowData.enterprise_results?.quality_score,\n      performance_prediction: workflowData.enterprise_results?.performance_prediction,\n      content_strategy: workflowData.enterprise_results?.content_strategy,\n      priority_level: workflowData.enterprise_results?.priority_level\n    },\n    \n    // Workflow status\n    status: {\n      current: \"completed\",\n      phase: \"ready_for_publication\",\n      completed_at: workflowData.completed_at,\n      user_approved: true,\n      enterprise_validated: workflowData.enterprise_results?.enterprise_validated || true\n    },\n    \n    // Actions available for UI\n    actions: {\n      view: {\n        url: `/api/content/${executionId}`,\n        method: \"GET\",\n        description: \"View full content details\"\n      },\n      edit: {\n        url: `/api/content/${executionId}/edit`,\n        method: \"PUT\", \n        description: \"Edit content\"\n      },\n      publish: {\n        url: `/api/content/${executionId}/publish`,\n        method: \"POST\",\n        description: \"Publish to Instagram\",\n        payload_required: [\"account_id\", \"scheduled_time\"]\n      },\n      duplicate: {\n        url: `/api/content/${executionId}/duplicate`,\n        method: \"POST\",\n        description: \"Create duplicate for A/B testing\"\n      },\n      archive: {\n        url: `/api/content/${executionId}/archive`,\n        method: \"DELETE\",\n        description: \"Archive content\"\n      }\n    }\n  },\n  \n  // METADATA FOR TRACKING\n  metadata: {\n    // Performance data\n    quality_metrics: {\n      score: workflowData.enterprise_results?.quality_score,\n      threshold_met: (workflowData.enterprise_results?.quality_score || 0) >= 0.75,\n      strategy_alignment: workflowData.enterprise_results?.content_strategy\n    },\n    \n    // Workflow tracking\n    workflow_metrics: {\n      nodes_executed: 25, // Estimate based on workflow\n      errors_encountered: 0,\n      recovery_used: false,\n      total_processing_time: \"~3 minutes\"\n    },\n    \n    // Business context\n    business_context: {\n      content_type: \"enterprise_instagram_post\",\n      target_audience: \"skincare_enthusiasts\",\n      campaign_context: workflowData.enterprise_results?.content_strategy,\n      brand_compliance: \"verified\"\n    }\n  },\n  \n  // UI SPECIFIC DATA\n  ui: {\n    // Display preferences\n    display: {\n      title: `üìù ${workflowData.enterprise_results?.final_post?.title || 'New Post'}`,\n      status_color: \"green\",\n      status_icon: \"‚úÖ\",\n      priority_badge: workflowData.enterprise_results?.priority_level?.toUpperCase()\n    },\n    \n    // Available operations\n    operations: [\"view\", \"edit\", \"publish\", \"duplicate\", \"archive\"],\n    \n    // Quick stats for dashboard\n    stats: {\n      quality_percentage: Math.round((workflowData.enterprise_results?.quality_score || 0) * 100),\n      predicted_engagement: Math.round(((workflowData.enterprise_results?.performance_prediction?.engagement_score || 0.85) * 100)),\n      enterprise_grade: true\n    }\n  },\n  \n  // LINKS & REFERENCES\n  links: {\n    self: `/api/executions/${executionId}`,\n    content: `/api/content/${executionId}`,\n    analytics: `/api/analytics/content/${executionId}`,\n    workflow: `/api/workflows/PostBuilder`,\n    \n    // External references\n    clickup_task: `https://app.clickup.com/task/${executionId}`, // If ClickUp enabled\n    telegram_thread: `https://t.me/c/skinclarityclub/${executionId}`\n  }\n};\n\nconsole.log(\"üìä === API RESPONSE SUMMARY ===\");\nconsole.log(\"‚úÖ Success:\", apiResponse.success);\nconsole.log(\"üìù Content ID:\", apiResponse.data.content.id);\nconsole.log(\"üéØ Quality Score:\", apiResponse.metadata.quality_metrics.score);\nconsole.log(\"üöÄ Available Actions:\", Object.keys(apiResponse.data.actions).length);\nconsole.log(\"üì± UI Ready:\", apiResponse.ui.operations.length, \"operations\");\n\nconsole.log(\"üì° PERFECT API RESPONSE READY FOR FRONTEND! üöÄ\");\n\nreturn [{ json: apiResponse }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [160, -360],
      "id": "651200d9-ea94-48d5-a879-7a38d06cfac1",
      "name": "API Response Builder"
    },
    {
      "parameters": {
        "jsCode": "// üö® API ERROR RESPONSE BUILDER\nconst errorData = $input.first().json;\nconst executionId = $execution.id;\n\nconst errorResponse = {\n  success: false,\n  timestamp: new Date().toISOString(),\n  execution_id: executionId,\n  workflow: \"PostBuilder\",\n  version: \"2.0_enterprise\",\n  \n  error: {\n    type: errorData.error_type || \"WorkflowExecutionError\",\n    message: errorData.error_message || \"Content generation failed\",\n    code: \"POST_GEN_001\",\n    phase: errorData.current_phase || \"unknown\",\n    recoverable: true\n  },\n  \n  data: {\n    partial_content: errorData.partial_results || null,\n    fallback_available: true,\n    retry_recommended: true\n  },\n  \n  actions: {\n    retry: {\n      url: `/api/content/retry/${executionId}`,\n      method: \"POST\",\n      description: \"Retry content generation\"\n    },\n    manual_review: {\n      url: `/api/content/${executionId}/review`,\n      method: \"GET\", \n      description: \"Manual review required\"\n    }\n  },\n  \n  ui: {\n    display: {\n      title: \"‚ùå Content Generation Failed\",\n      status_color: \"red\",\n      status_icon: \"‚ö†Ô∏è\",\n      error_message: \"Please try again or contact support\"\n    },\n    operations: [\"retry\", \"manual_review\"]\n  }\n};\n\nreturn [{ json: errorResponse }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [300, -180],
      "id": "b400836b-201e-4d8b-9a45-63bca08e4207",
      "name": "API Error Response Builder"
    },
    {
      "parameters": {
        "jsCode": "// üîç DEBUG PLACID RESPONSE\nconst placidData = $input.first().json;\n\nconsole.log(\"üé® === PLACID RESPONSE DEBUG ===\");\nconsole.log(\"üìÑ Full Placid Response:\", JSON.stringify(placidData, null, 2));\nconsole.log(\"üîë Available keys:\", Object.keys(placidData));\n\n// Check common image URL fields\nconst possibleImageFields = [\n    'image_url', \n    'url', \n    'download_url', \n    'image', \n    'result_url',\n    'download',\n    'link'\n];\n\nconsole.log(\"üñºÔ∏è === IMAGE URL ANALYSIS ===\");\npossibleImageFields.forEach(field => {\n    if (placidData[field]) {\n        console.log(`‚úÖ Found ${field}:`, placidData[field]);\n    } else {\n        console.log(`‚ùå Missing ${field}`);\n    }\n});\n\nreturn [{ json: placidData }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [0, 240],
      "id": "5c91e57a-b791-4139-a2ef-51775c56f5f6",
      "name": "Code"
    }
  ],
  "pinData": {
    "Enterprise Input Trigger": [
      {
        "json": {
          "imageTitle": "Acne Solutions",
          "imagePrompt": "Clean skincare routine setup with acne treatment products, salicylic acid cleanser and benzoyl peroxide cream on white marble bathroom counter, bright natural lighting, professional medical aesthetic, before and after skin comparison, clear skin transformation journey, minimalist clean style, high-end dermatological brand photography",
          "chatID": "6475835412",
          "contentStrategy": null,
          "priority": null
        }
      }
    ]
  },
  "connections": {
    "Enterprise Input Trigger": {
      "main": [
        [
          {
            "node": "Template Configuration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enterprise Visual Model": {
      "ai_languageModel": [
        [
          {
            "node": "Enterprise Visual Creator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Enterprise Visual Creator": {
      "main": [
        [
          {
            "node": "Enterprise Image Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enterprise Image Generation": {
      "main": [
        [
          {
            "node": "Store Enterprise Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Enterprise Image": {
      "main": [
        [
          {
            "node": "Generate Enterprise URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Enterprise URL": {
      "main": [
        [
          {
            "node": "Save Enterprise Image Asset",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enterprise Workflow Registry": {
      "main": [
        [
          {
            "node": "Create ClickUp Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize Enterprise StateCoordinator": {
      "main": [
        [
          {
            "node": "Enterprise Visual Creator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Enterprise Image Asset": {
      "main": [
        [
          {
            "node": "Update Enterprise State - Image Generated",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Enterprise State - Image Generated": {
      "main": [
        [
          {
            "node": "Update Task - Image Ready",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enterprise Telegram Image Review": {
      "main": [
        [
          {
            "node": "Wait for Enterprise Image Approval",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Enterprise Image Approval": {
      "main": [
        [
          {
            "node": "Process Enterprise Image Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Enterprise Image Callback": {
      "main": [
        [
          {
            "node": "Enterprise Image Action Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enterprise Image Action Router": {
      "main": [
        [
          {
            "node": "Get Enterprise StateCoordinator Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Enterprise Regenerate Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Enterprise Regenerate Image": {
      "main": [
        [
          {
            "node": "Enterprise Visual Creator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Enterprise StateCoordinator Data": {
      "main": [
        [
          {
            "node": "Enterprise Content Creator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enterprise Content Model": {
      "ai_languageModel": [
        [
          {
            "node": "Enterprise Content Creator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Enterprise Content Creator": {
      "main": [
        [
          {
            "node": "Prepare Enterprise Content Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Enterprise Content Data": {
      "main": [
        [
          {
            "node": "Create Enterprise Final Post Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Enterprise Final Post Image": {
      "main": [
        [
          {
            "node": "Update Enterprise State - Content Generated",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Enterprise State - Content Generated": {
      "main": [
        [
          {
            "node": "Update Task - Content Ready",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enterprise Telegram Final Review": {
      "main": [
        [
          {
            "node": "Wait for Enterprise Final Approval",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Enterprise Final Approval": {
      "main": [
        [
          {
            "node": "Process Enterprise Final Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Enterprise Final Callback": {
      "main": [
        [
          {
            "node": "Enterprise Final Action Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enterprise Final Action Router": {
      "main": [
        [
          {
            "node": "Complete Enterprise Workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Enterprise Regenerate Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Enterprise Regenerate Final": {
      "main": [
        [
          {
            "node": "Enterprise Content Creator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Complete Enterprise Workflow": {
      "main": [
        [
          {
            "node": "Update Task - Content Ready1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create ClickUp Task": {
      "main": [
        [
          {
            "node": "Initialize Enterprise StateCoordinator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Task - Image Ready": {
      "main": [
        [
          {
            "node": "Enterprise Telegram Image Review",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Task - Content Ready": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Task - Content Ready1": {
      "main": [
        [
          {
            "node": "API Response Builder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Template Configuration": {
      "main": [
        [
          {
            "node": "Enterprise Workflow Registry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize for UI/API": {
      "main": [
        [
          {
            "node": "Enterprise Success Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "API Response Builder": {
      "main": [
        [
          {
            "node": "Normalize for UI/API",
            "type": "main",
            "index": 0
          },
          {
            "node": "API Error Response Builder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Enterprise Telegram Final Review",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "6cc3d711-57dc-4dae-8095-59422ab0091d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "dfdd26cd27fe046d045e60df6b98f78e52a497ca304bdcb672e06512ba750a2c"
  },
  "id": "h6UCSPqMGiZIDp2C",
  "tags": []
}
