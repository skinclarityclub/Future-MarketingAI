{
  "name": "State-Based Callback Handler",
  "nodes": [
    {
      "parameters": {
        "content": "# üöÄ COMPLETE MULTI-CONTENT CALLBACK HANDLER\n\n## ‚úÖ EXACT COPY VAN WERKEND SYSTEEM\n- Behoudt ALLE nodes van het originele werkende systeem\n- Volledig compatible met bestaande PostBuilder\n- Uitgebreid voor Stories & Carousels\n\n## üì± CALLBACKS (Bestaand werkend systeem):\n- **AIP/MIP:** Image approval/modify (Posts)\n- **AFP/MFP:** Final approval/modify (Posts) \n- **AIS/MIS:** Image approval/modify (Stories)\n- **AFS/MFS:** Final approval/modify (Stories)\n- **AIC/MIC:** Image approval/modify (Carousels)\n- **AFC/MFC:** Final approval/modify (Carousels)\n\n## üîÑ ALLE TELEGRAM NODES:\n- Aparte nodes voor elke actie\n- Exact zoals origineel werkende systeem\n- Geen vereenvoudigingen",
        "height": 480,
        "width": 680,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-620, -260],
      "id": "f43ee04a-9107-4c8d-bf5a-3f4c02ce9107",
      "name": "Complete System Info"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "callback-handler",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "f86ff515-136a-40e1-afd2-f610f39a2c57",
      "name": "Webhook Callback Handler",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [-780, 680],
      "webhookId": "callback-handler-webhook"
    },
    {
      "parameters": {
        "jsCode": "// üöÄ COMPLETE CALLBACK DECODER - Exact zoals werkend systeem\nconst inputData = $input.first().json.body;\n\nif (inputData.callback_query) {\n  let callbackData = inputData.callback_query.data;\n  console.log(\"Raw callback data:\", callbackData);\n  \n  // Clean de callback data (exact zoals origineel)\n  if (callbackData.includes('\"callback_data\"')) {\n    const match = callbackData.match(/\"([^\"]+)\"$/);\n    if (match) {\n      callbackData = match[1];\n    }\n  }\n  \n  const parts = callbackData.split('_');\n  \n  if (parts.length !== 3) {\n    return [{\n      json: {\n        message_type: 'callback_query',\n        error: 'Invalid callback data format',\n        original_data: callbackData,\n        user_id: inputData.callback_query.from.id,\n        chat_id: inputData.callback_query.message.chat.id\n      }\n    }];\n  }\n  \n  const typeCode = parts[0];\n  const executionId = parts[1]; \n  const webhookId = parts[2];\n\n  // üéØ UITGEBREIDE TYPE MAP (origineel + Stories + Carousels)\n  const typeMap = {\n    // POSTS (ORIGINEEL WERKEND SYSTEEM)\n    'AIP': { type: 'approve_image_post', action: 'approved', expected_state: 'IMAGE_GENERATED', target_state: 'IMAGE_APPROVED' },\n    'MIP': { type: 'modify_image_post', action: 'modify', expected_state: 'IMAGE_GENERATED', target_state: 'INITIAL' },\n    'AFP': { type: 'approve_final_post', action: 'approved', expected_state: 'CONTENT_GENERATED', target_state: 'COMPLETED' },\n    'MFP': { type: 'modify_final_post', action: 'modify', expected_state: 'CONTENT_GENERATED', target_state: 'CONTENT_GENERATED' },\n    \n    // STORIES (NIEUW)\n    'AIS': { type: 'approve_image_story', action: 'approved', expected_state: 'IMAGE_GENERATED', target_state: 'IMAGE_APPROVED' },\n    'MIS': { type: 'modify_image_story', action: 'modify', expected_state: 'IMAGE_GENERATED', target_state: 'INITIAL' },\n    'AFS': { type: 'approve_final_story', action: 'approved', expected_state: 'CONTENT_GENERATED', target_state: 'COMPLETED' },\n    'MFS': { type: 'modify_final_story', action: 'modify', expected_state: 'CONTENT_GENERATED', target_state: 'CONTENT_GENERATED' },\n    \n    // CAROUSELS (NIEUW)\n    'AIC': { type: 'approve_image_carousel', action: 'approved', expected_state: 'IMAGE_GENERATED', target_state: 'IMAGE_APPROVED' },\n    'MIC': { type: 'modify_image_carousel', action: 'modify', expected_state: 'IMAGE_GENERATED', target_state: 'INITIAL' },\n    'AFC': { type: 'approve_final_carousel', action: 'approved', expected_state: 'CONTENT_GENERATED', target_state: 'COMPLETED' },\n    'MFC': { type: 'modify_final_carousel', action: 'modify', expected_state: 'CONTENT_GENERATED', target_state: 'CONTENT_GENERATED' }\n  };\n\n  const callbackInfo = typeMap[typeCode];\n  \n  if (!callbackInfo) {\n    return [{\n      json: {\n        message_type: 'callback_query',\n        error: 'Unknown callback type',\n        callback_type: typeCode,\n        user_id: inputData.callback_query.from.id,\n        chat_id: inputData.callback_query.message.chat.id\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      message_type: 'callback_query',\n      callback_type: callbackInfo.type,\n      action: callbackInfo.action,\n      expected_state: callbackInfo.expected_state,\n      target_state: callbackInfo.target_state,\n      execution_id: executionId,\n      webhook_id: webhookId,\n      user_id: inputData.callback_query.from.id,\n      chat_id: inputData.callback_query.message.chat.id,\n      message_id: inputData.callback_query.message.message_id,\n      timestamp: new Date().toISOString(),\n      callback_query_id: inputData.callback_query.id\n    }\n  }];\n}\n\nif (inputData.message) {\n  return [{\n    json: {\n      message_type: 'text_message',\n      text: inputData.message.text,\n      user_id: inputData.message.from.id,\n      chat_id: inputData.message.chat.id,\n      message_id: inputData.message.message_id,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    message_type: 'unknown',\n    debug_data: inputData\n  }\n}];"
      },
      "id": "3d74e8b9-66b3-4ae5-9705-2a522276524d",
      "name": "Decode Callback Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-580, 680]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message_type }}",
                    "rightValue": "callback_query",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Button_Click"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message_type }}",
                    "rightValue": "text_message",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text_Message"
            }
          ]
        },
        "options": {}
      },
      "id": "5ef066c5-4b02-4d52-8706-a547182598e2",
      "name": "Message Type Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [-400, 680]
    },
    {
      "parameters": {
        "jsCode": "// ‚úÖ Get current state (exact zoals origineel werkend systeem)\nconst callbackData = $('Message Type Router').first().json;\nconst executionId = callbackData.execution_id;\n\nconsole.log(\"üîç Getting current state via StateCoordinator\");\nconsole.log(\"üÜî Execution ID:\", executionId);\n\n// Validate execution ID format (exact zoals origineel)\nif (!executionId || executionId === 'unknown') {\n  console.log(\"‚ùå Invalid execution ID\");\n  return [{ \n    json: { \n      ...callbackData,\n      current_state: 'UNKNOWN',\n      state_data: null,\n      workflow_exists: false,\n      error: 'Invalid execution ID'\n    } \n  }];\n}\n\n// Mock StateCoordinator response (exact zoals origineel)\nlet mockCurrentState = 'UNKNOWN';\nlet mockStateData = {};\nlet workflowExists = true;\n\n// Determine current state based on callback type (uitgebreid voor alle types)\nif (callbackData.callback_type === 'approve_image_post' || callbackData.callback_type === 'approve_image_story' || callbackData.callback_type === 'approve_image_carousel') {\n  mockCurrentState = 'IMAGE_GENERATED';\n  mockStateData = {\n    current_state: 'IMAGE_GENERATED',\n    current_phase: 'image_generation',\n    workflow_type: callbackData.callback_type.includes('post') ? 'createPost' : callbackData.callback_type.includes('story') ? 'createStory' : 'createCarousel',\n    execution_id: executionId,\n    output_data: {\n      image_url: 'mock-image-url',\n      generated_at: new Date().toISOString()\n    }\n  };\n} else if (callbackData.callback_type === 'approve_final_post' || callbackData.callback_type === 'approve_final_story' || callbackData.callback_type === 'approve_final_carousel') {\n  mockCurrentState = 'CONTENT_GENERATED';\n  mockStateData = {\n    current_state: 'CONTENT_GENERATED',\n    current_phase: 'content_creation',\n    workflow_type: callbackData.callback_type.includes('post') ? 'createPost' : callbackData.callback_type.includes('story') ? 'createStory' : 'createCarousel',\n    execution_id: executionId,\n    output_data: {\n      final_post: {\n        image_url: 'mock-final-image-url',\n        title: 'Mock Title',\n        subtitle: 'Mock Subtitle'\n      }\n    }\n  };\n} else if (callbackData.callback_type.includes('modify')) {\n  mockCurrentState = callbackData.expected_state;\n  mockStateData = {\n    current_state: mockCurrentState,\n    current_phase: 'regeneration',\n    workflow_type: callbackData.callback_type.includes('post') ? 'createPost' : callbackData.callback_type.includes('story') ? 'createStory' : 'createCarousel',\n    execution_id: executionId\n  };\n}\n\nconsole.log(\"‚úÖ MOCK: Simulated StateCoordinator response\");\nconsole.log(\"üìä Mock Current State:\", mockCurrentState);\nconsole.log(\"üéØ Expected State:\", callbackData.expected_state);\n\n// Return compatible format (exact zoals origineel)\nreturn [{ \n  json: {\n    ...callbackData,\n    current_state: mockCurrentState,\n    state_data: mockStateData,\n    workflow_exists: workflowExists,\n    statecoordinator_response: {\n      success: true,\n      data: mockStateData,\n      mock_mode: true\n    },\n    quick_fix_mode: true\n  } \n}];"
      },
      "id": "735dac49-1d20-4ed4-ada8-980b8730757d",
      "name": "Get Current State",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-260, 560]
    },
    {
      "parameters": {
        "jsCode": "// ‚úÖ Validate state transition (exact zoals origineel werkend systeem)\nconst callbackData = $input.first().json;\nconst executionId = callbackData.execution_id;\nconst currentState = callbackData.current_state;\nconst expectedState = callbackData.expected_state;\nconst action = callbackData.action;\n\nconsole.log(\"üîç === STATECOORDINATOR VALIDATION ===\");\nconsole.log(\"üìä Current State:\", currentState);\nconsole.log(\"üéØ Expected State:\", expectedState);\nconsole.log(\"‚ö° Action:\", action);\nconsole.log(\"üÜî Execution ID:\", executionId);\n\nlet stateValid = false;\nlet validationResult = null;\n\n// Check if workflow exists first (exact zoals origineel)\nif (!callbackData.workflow_exists && !callbackData.quick_fix_mode) {\n  console.log(\"‚ùå Workflow does not exist in StateCoordinator\");\n  stateValid = false;\n  validationResult = {\n    is_valid_transition: false,\n    validation_errors: ['Workflow not found in StateCoordinator'],\n    current_state: 'UNKNOWN',\n    target_state: callbackData.target_state\n  };\n} else {\n  console.log(\"‚úÖ MOCK: Performing simple validation\");\n  \n  // Define simple validation rules (exact zoals origineel)\n  const validTransitions = {\n    'IMAGE_GENERATED': ['IMAGE_APPROVED', 'INITIAL'],\n    'CONTENT_GENERATED': ['COMPLETED', 'INITIAL', 'CONTENT_GENERATED'],\n    'INITIAL': ['IMAGE_GENERATED'],\n    'IMAGE_APPROVED': ['CONTENT_GENERATED']\n  };\n  \n  const targetState = callbackData.target_state;\n  const allowedStates = validTransitions[currentState] || [];\n  \n  if (allowedStates.includes(targetState)) {\n    stateValid = true;\n    validationResult = {\n      is_valid_transition: true,\n      validation_errors: [],\n      current_state: currentState,\n      target_state: targetState,\n      mock_validation: true\n    };\n    console.log(\"‚úÖ MOCK: Valid transition:\", currentState, \"‚Üí\", targetState);\n  } else {\n    stateValid = false;\n    validationResult = {\n      is_valid_transition: false,\n      validation_errors: [`Invalid transition from ${currentState} to ${targetState}. Allowed: ${allowedStates.join(', ')}`],\n      current_state: currentState,\n      target_state: targetState,\n      mock_validation: true\n    };\n    console.log(\"‚ùå MOCK: Invalid transition:\", currentState, \"‚Üí\", targetState);\n  }\n}\n\n// Build final result (exact zoals origineel)\nconst result = {\n  ...callbackData,\n  state_valid: stateValid,\n  validation_result: validationResult,\n  validation_status: stateValid ? 'VALID' : 'INVALID',\n  validation_message: stateValid ? \n    `‚úÖ Valid transition: ${currentState} ‚Üí ${callbackData.target_state}` :\n    `‚ùå Invalid transition: ${validationResult?.validation_errors?.join(', ') || 'Unknown error'}`,\n  quick_fix_mode: true\n};\n\nconsole.log(\"üéØ === VALIDATION COMPLETE ===\");\nconsole.log(\"‚úÖ State Valid:\", stateValid);\nconsole.log(\"üìù Message:\", result.validation_message);\nconsole.log(\"üîÑ Will Continue:\", stateValid ? 'YES' : 'NO');\n\nreturn [{ json: result }];"
      },
      "id": "137e5472-57d0-4542-868b-3c0b625fc964",
      "name": "Validate State Transition",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-100, 600]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.state_valid }}",
                    "rightValue": true,
                    "operator": {
                      "type": "boolean",
                      "operation": "true"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Valid_State"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.state_valid }}",
                    "rightValue": false,
                    "operator": {
                      "type": "boolean",
                      "operation": "true"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Invalid_State"
            }
          ]
        },
        "options": {}
      },
      "id": "60a8f59d-1f97-4c34-9d2d-b191afb863ae",
      "name": "State Validation Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [60, 600]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_type }}",
                    "rightValue": "approve_image_post",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Approve_Image_Post"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_type }}",
                    "rightValue": "modify_image_post",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Modify_Image_Post"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_type }}",
                    "rightValue": "approve_final_post",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Approve_Final_Post"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_type }}",
                    "rightValue": "modify_final_post",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Modify_Final_Post"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_type }}",
                    "rightValue": "approve_image_story",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Approve_Image_Story"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_type }}",
                    "rightValue": "modify_image_story",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Modify_Image_Story"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_type }}",
                    "rightValue": "approve_final_story",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Approve_Final_Story"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_type }}",
                    "rightValue": "modify_final_story",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Modify_Final_Story"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_type }}",
                    "rightValue": "approve_image_carousel",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Approve_Image_Carousel"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_type }}",
                    "rightValue": "modify_image_carousel",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Modify_Image_Carousel"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_type }}",
                    "rightValue": "approve_final_carousel",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Approve_Final_Carousel"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_type }}",
                    "rightValue": "modify_final_carousel",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Modify_Final_Carousel"
            }
          ]
        },
        "options": {}
      },
      "id": "3a0de2c0-8db5-4aa1-a4cc-22c48be4842c",
      "name": "Callback Action Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [240, 520]
    },
    {
      "parameters": {
        "jsCode": "// ‚úÖ Execute state transition (exact zoals origineel werkend systeem)\nconst callbackData = $input.first().json;\nconst executionId = callbackData.execution_id;\nconst targetState = callbackData.target_state;\nconst action = callbackData.action;\n\nconsole.log(\"üîÑ === EXECUTE STATE TRANSITION (FIXED) ===\");\nconsole.log(\"üÜî Execution ID:\", executionId);\nconsole.log(\"üéØ Target State:\", targetState);\nconsole.log(\"‚ö° Action:\", action);\n\n// Validate required data (exact zoals origineel)\nif (!executionId) {\n    console.log(\"‚ùå ERROR: No execution ID found\");\n    return [{ \n        json: { \n            error: \"Missing execution ID\",\n            input_data: callbackData,\n            transition_executed: false\n        } \n    }];\n}\n\nif (!targetState) {\n    console.log(\"‚ùå ERROR: No target state found\");\n    return [{ \n        json: { \n            error: \"Missing target state\",\n            input_data: callbackData,\n            transition_executed: false\n        } \n    }];\n}\n\nif (!action) {\n    console.log(\"‚ùå ERROR: No action found\");\n    return [{ \n        json: { \n            error: \"Missing action\",\n            input_data: callbackData,\n            transition_executed: false\n        } \n    }];\n}\n\nconsole.log(\"‚úÖ All required data present, proceeding with transition\");\n\n// Mock successful transition response (exact zoals origineel)\nconst mockTransitionResponse = {\n    success: true,\n    message: 'State transition completed successfully',\n    data: {\n        transition: {\n            from_state: callbackData.current_state,\n            to_state: targetState,\n            trigger_type: 'user_action',\n            user_action: action,\n            transition_timestamp: new Date().toISOString()\n        },\n        new_state: targetState\n    },\n    mock_mode: true\n};\n\nconsole.log(\"‚úÖ MOCK: State transition executed\");\nconsole.log(\"üìÑ Mock Response:\", JSON.stringify(mockTransitionResponse, null, 2));\n\n// Return data (exact zoals origineel)\nreturn [{ \n    json: {\n        ...callbackData,\n        transition_executed: true,\n        new_state: targetState,\n        statecoordinator_response: mockTransitionResponse,\n        transition_timestamp: new Date().toISOString(),\n        quick_fix_mode: true,\n        error_fixed: true\n    } \n}];"
      },
      "id": "bf792c3d-b5d9-44a5-8c1a-53c3a23be964",
      "name": "Execute State Transition",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [520, 380]
    },
    {
      "parameters": {
        "jsCode": "// Prepare workflow resume (exact zoals origineel werkend systeem)\nconst callbackData = $('Execute State Transition').first().json;\nconst executionId = callbackData.execution_id;\nconst action = callbackData.action;\nconst callbackType = callbackData.callback_type;\nconst feedback = callbackData.feedback || '';\n\nconsole.log(\"üîÑ Preparing workflow resume with StateCoordinator data\");\nconsole.log(\"üÜî Execution ID:\", executionId);\nconsole.log(\"üéØ Action:\", action);\nconsole.log(\"üìä Callback Type:\", callbackType);\nconsole.log(\"üí¨ Feedback:\", feedback);\n\n// Determine resume action (exact zoals origineel maar uitgebreid)\nlet resumeAction = 'unknown';\n\nif (callbackType.includes('image')) {\n  if (action === 'approved') resumeAction = 'resume_image_approval';\n  else if (action === 'modify') resumeAction = 'resume_image_modify';\n} else if (callbackType.includes('final')) {\n  if (action === 'approved') resumeAction = 'resume_final_approval';\n  else if (action === 'modify') resumeAction = 'resume_final_modify';\n}\n\n// Prepare resume data (exact zoals origineel)\nconst resumeData = {\n  action: action,\n  execution_id: executionId,\n  user_id: callbackData.user_id || \"unknown\",\n  chat_id: callbackData.chat_id || \"unknown\",\n  callback_type: callbackType,\n  current_state: callbackData.new_state || callbackData.target_state,\n  timestamp: callbackData.timestamp || new Date().toISOString(),\n  feedback: feedback,\n  resume_action: resumeAction,\n  statecoordinator_managed: true\n};\n\nconsole.log(\"‚úÖ Resume data prepared with action:\", resumeAction);\nconsole.log(\"üìÑ Clean data:\", JSON.stringify(resumeData, null, 2));\n\nreturn [{ json: resumeData }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [540, 200],
      "id": "44427432-befc-4ab5-b815-90146a643dca",
      "name": "Prepare Resume Data"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.resume_action }}",
                    "rightValue": "resume_image_approval",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Image_Approval"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.resume_action }}",
                    "rightValue": "resume_image_modify",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Image_Modify"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.resume_action }}",
                    "rightValue": "resume_final_approval",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Final_Approval"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.resume_action }}",
                    "rightValue": "resume_final_modify",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Final_Modify"
            }
          ]
        },
        "options": {}
      },
      "id": "1a194349-9919-4262-93d8-75930de92ae0",
      "name": "Resume Action Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [740, 380]
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "‚úÖ Perfect! De afbeelding is goedgekeurd. Ik ga nu de complete post maken! üöÄ",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "7212c303-e741-47c1-bfa1-9808c696a804",
      "name": "Telegram Approve Image Post",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [520, 60],
      "webhookId": "approve-image-post-telegram",
      "credentials": {
        "telegramApi": {
          "id": "ioh9vLdQ3pzyX0kw",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "chatId": "={{ $json.chat_id }}",
        "message": "‚úèÔ∏è Wat wil je precies aanpassen aan de post afbeelding? Geef me je feedback:",
        "responseType": "freeText",
        "options": {
          "appendAttribution": false
        }
      },
      "id": "de3cf29c-9683-47f5-8c5d-8d4605755464",
      "name": "Telegram Modify Image Post",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [540, 580],
      "webhookId": "modify-image-post-telegram",
      "credentials": {
        "telegramApi": {
          "id": "ioh9vLdQ3pzyX0kw",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "üéâ Geweldig! Je post is klaar en wordt nu gepubliceerd! üöÄ",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "81626e98-2845-45ce-a7bd-1aadef5cd9a6",
      "name": "Telegram Approve Final Post",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [620, 740],
      "webhookId": "approve-final-post-telegram",
      "credentials": {
        "telegramApi": {
          "id": "ioh9vLdQ3pzyX0kw",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "chatId": "={{ $json.chat_id }}",
        "message": "‚úèÔ∏è Wat wil je aanpassen aan de post? (tekst, layout, etc.):",
        "responseType": "freeText",
        "options": {
          "appendAttribution": false
        }
      },
      "id": "f9f5a4c8-44c8-4c57-9609-0c0ad97f06e5",
      "name": "Telegram Modify Final Post",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [620, 1060],
      "webhookId": "modify-final-post-telegram",
      "credentials": {
        "telegramApi": {
          "id": "ioh9vLdQ3pzyX0kw",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "‚úÖ Perfect! De story afbeelding is goedgekeurd. Ik ga nu de complete story maken! üì±",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "8b88ded0-c0ce-4f34-aaeb-54ee22d1ebeb",
      "name": "Telegram Approve Image Story",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [160, 160],
      "webhookId": "approve-image-story-telegram",
      "credentials": {
        "telegramApi": {
          "id": "ioh9vLdQ3pzyX0kw",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "chatId": "={{ $json.chat_id }}",
        "message": "‚úèÔ∏è Wat wil je precies aanpassen aan de story afbeelding? Geef me je feedback:",
        "responseType": "freeText",
        "options": {
          "appendAttribution": false
        }
      },
      "id": "795ac69c-f167-46aa-ad9f-997888c3f5f9",
      "name": "Telegram Modify Image Story",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [160, 320],
      "webhookId": "modify-image-story-telegram",
      "credentials": {
        "telegramApi": {
          "id": "ioh9vLdQ3pzyX0kw",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "üéâ Geweldig! Je story is klaar en wordt nu gepubliceerd! üì±üöÄ",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "6ac9f8fa-d475-47cf-bf24-bbdea94d46d4",
      "name": "Telegram Approve Final Story",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [260, 480],
      "webhookId": "approve-final-story-telegram",
      "credentials": {
        "telegramApi": {
          "id": "ioh9vLdQ3pzyX0kw",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "chatId": "={{ $json.chat_id }}",
        "message": "‚úèÔ∏è Wat wil je aanpassen aan de story? (tekst, layout, etc.):",
        "responseType": "freeText",
        "options": {
          "appendAttribution": false
        }
      },
      "id": "2b947cde-95e0-4fbb-9714-b666f8c7db43",
      "name": "Telegram Modify Final Story",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [260, 640],
      "webhookId": "modify-final-story-telegram",
      "credentials": {
        "telegramApi": {
          "id": "ioh9vLdQ3pzyX0kw",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "‚úÖ Perfect! De carousel afbeeldingen zijn goedgekeurd. Ik ga nu de complete carousel maken! üé†",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "dcf52bdd-bb1d-4e83-967d-df6d6515be25",
      "name": "Telegram Approve Image Carousel",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [-200, 160],
      "webhookId": "approve-image-carousel-telegram",
      "credentials": {
        "telegramApi": {
          "id": "ioh9vLdQ3pzyX0kw",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "chatId": "={{ $json.chat_id }}",
        "message": "‚úèÔ∏è Wat wil je precies aanpassen aan de carousel afbeeldingen? Geef me je feedback:",
        "responseType": "freeText",
        "options": {
          "appendAttribution": false
        }
      },
      "id": "910ac664-0e90-47cd-813e-612a202d028f",
      "name": "Telegram Modify Image Carousel",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [-200, 320],
      "webhookId": "modify-image-carousel-telegram",
      "credentials": {
        "telegramApi": {
          "id": "ioh9vLdQ3pzyX0kw",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "üéâ Geweldig! Je carousel is klaar en wordt nu gepubliceerd! üé†üöÄ",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "26031590-954e-41cc-8152-602f992a22e6",
      "name": "Telegram Approve Final Carousel",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [-100, 480],
      "webhookId": "approve-final-carousel-telegram",
      "credentials": {
        "telegramApi": {
          "id": "ioh9vLdQ3pzyX0kw",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "chatId": "={{ $json.chat_id }}",
        "message": "‚úèÔ∏è Wat wil je aanpassen aan de carousel? (tekst, layout, etc.):",
        "responseType": "freeText",
        "options": {
          "appendAttribution": false
        }
      },
      "id": "b6c6c2fb-6b71-4691-9848-e5719eaf1cb6",
      "name": "Telegram Modify Final Carousel",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [-100, 640],
      "webhookId": "modify-final-carousel-telegram",
      "credentials": {
        "telegramApi": {
          "id": "ioh9vLdQ3pzyX0kw",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "assignment1",
              "name": "feedback",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "assignment2",
              "name": "execution_id",
              "value": "={{ $('State Validation Router').first().json.execution_id }}",
              "type": "string"
            },
            {
              "id": "assignment3",
              "name": "user_id",
              "value": "={{ $('State Validation Router').first().json.user_id }}",
              "type": "string"
            },
            {
              "id": "assignment4",
              "name": "chat_id",
              "value": "={{ $('State Validation Router').first().json.chat_id }}",
              "type": "string"
            },
            {
              "id": "assignment5",
              "name": "callback_type",
              "value": "={{ $('State Validation Router').first().json.callback_type }}",
              "type": "string"
            },
            {
              "id": "assignment6",
              "name": "webhook_id",
              "value": "={{ $('State Validation Router').first().json.webhook_id }}",
              "type": "string"
            },
            {
              "id": "assignment7",
              "name": "action",
              "value": "modify",
              "type": "string"
            },
            {
              "id": "assignment8",
              "name": "timestamp",
              "value": "={{ new Date().toISOString() }}",
              "type": "string"
            },
            {
              "id": "assignment9",
              "name": "current_state",
              "value": "={{ $('State Validation Router').first().json.current_state }}",
              "type": "string"
            },
            {
              "id": "assignment10",
              "name": "target_state",
              "value": "={{ $('State Validation Router').first().json.target_state }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "5e7d44a3-8ad9-4b69-ad4a-9c09e0245012",
      "name": "Add User Feedback",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [880, 800]
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "‚ùå Ongeldige actie: {{ $json.validation_message }}\n\nDe workflow is mogelijk al afgerond of er is een fout opgetreden. Probeer een nieuwe post te maken.",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "55dcaf0f-d698-4fc1-aef9-7f2da0f74bdf",
      "name": "Telegram Invalid State",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [260, 820],
      "webhookId": "invalid-state-telegram",
      "credentials": {
        "telegramApi": {
          "id": "ioh9vLdQ3pzyX0kw",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.text }}",
                    "rightValue": "post",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "id": "dac01929-416f-455b-90da-c768d90e4ca0"
                  }
                ],
                "combinator": "or"
              },
              "renameOutput": true,
              "outputKey": "Create_Post"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.text }}",
                    "rightValue": "story",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "id": "ff31d62c-7ace-44b4-b021-5720d8b89239"
                  }
                ],
                "combinator": "or"
              },
              "renameOutput": true,
              "outputKey": "Create_Story"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.text }}",
                    "rightValue": "carousel",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "id": "cc31d62c-7ace-44b4-b021-5720d8b89240"
                  }
                ],
                "combinator": "or"
              },
              "renameOutput": true,
              "outputKey": "Create_Carousel"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "bbd2a776-1186-4dfe-a3e5-b39093d2da50",
      "name": "Text Command Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [-320, 900]
    },
    {
      "parameters": {
        "workflowId": "h6UCSPqMGiZIDp2C",
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "imageTitle": "={{ $json.text.split('post')[1]?.trim() || 'Instagram Post' }}",
            "imagePrompt": "={{ $json.text.split('post')[1]?.trim() || 'aesthetic Instagram content, clean professional style' }}",
            "chatID": "={{ $json.chat_id }}"
          }
        },
        "options": {}
      },
      "id": "f7c6e355-7273-4b7b-a1f9-39c059690a32",
      "name": "Execute CreatePost",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [-60, 820]
    },
    {
      "parameters": {
        "chatId": "=6475835412",
        "text": "üöÄ Ik ga een Instagram post maken! Even geduld...",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "aa2eb8cf-9953-4ec5-9454-3d35d4123424",
      "name": "Post Creation Confirmation",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [120, 920],
      "webhookId": "post-creation-telegram",
      "credentials": {
        "telegramApi": {
          "id": "ioh9vLdQ3pzyX0kw",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "chatId": "=6475835412",
        "text": "üì± Ik ga een Instagram story maken! Even geduld...",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "04ef132c-238e-41b9-bb4b-6e8a3873e25a",
      "name": "Story Creation Confirmation",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [120, 1040],
      "webhookId": "story-creation-telegram",
      "credentials": {
        "telegramApi": {
          "id": "ioh9vLdQ3pzyX0kw",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "chatId": "=6475835412",
        "text": "üé† Ik ga een Instagram carousel maken! Even geduld...",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "dd4adfe1-172f-48dc-8091-267cae087993",
      "name": "Carousel Creation Confirmation",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [120, 1160],
      "webhookId": "carousel-creation-telegram",
      "credentials": {
        "telegramApi": {
          "id": "ioh9vLdQ3pzyX0kw",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "chatId": "=6475835412",
        "text": "üëã Hallo! Ik ben je Instagram content assistent.\n\nüé® Typ 'post' + je onderwerp om een Instagram post te maken\nüì± Typ 'story' + je onderwerp voor een story\nüé† Typ 'carousel' + je onderwerp voor een carousel\n\nBijvoorbeeld:\n‚Ä¢ 'post over huidverzorging tips'\n‚Ä¢ 'story over morning routine'\n‚Ä¢ 'carousel over 5 skincare myths'",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "871ffb82-3e16-4454-b1af-e21065efdeef",
      "name": "General Chat Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [-80, 1280],
      "webhookId": "general-chat-telegram",
      "credentials": {
        "telegramApi": {
          "id": "ioh9vLdQ3pzyX0kw",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://skinclarityclub.app.n8n.cloud/webhook-waiting/{{ $json.execution_id }}/enterprise-image-approval",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"action\": \"{{ $json.action }}\",\n  \"execution_id\": \"{{ $json.execution_id }}\",\n  \"user_id\": \"{{ $json.user_id }}\",\n  \"chat_id\": \"{{ $json.chat_id }}\",\n  \"callback_type\": \"{{ $json.callback_type }}\",\n  \"timestamp\": \"{{ $json.timestamp }}\",\n  \"resume_source\": \"callback_handler\"\n}",
        "options": {}
      },
      "id": "1eaaa6aa-8d47-4c5e-bdbe-d1ade35706dd",
      "name": "Resume Image Approval",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [820, -60]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://skinclarityclub.app.n8n.cloud/webhook-waiting/{{ $json.execution_id }}/enterprise-final-approval",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"action\": \"{{ $json.action }}\",\n  \"execution_id\": \"{{ $json.execution_id }}\",\n  \"user_id\": \"{{ $json.user_id }}\",\n  \"chat_id\": \"{{ $json.chat_id }}\",\n  \"callback_type\": \"{{ $json.callback_type }}\",\n  \"timestamp\": \"{{ $json.timestamp }}\",\n  \"resume_source\": \"callback_handler\"\n}",
        "options": {}
      },
      "id": "f4ec772f-b6ce-4693-9d92-b9ed728f98e8",
      "name": "Resume Final Approval",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1040, 540]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://skinclarityclub.app.n8n.cloud/webhook-waiting/{{ $json.execution_id }}/enterprise-image-approval",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"action\": \"{{ $json.action }}\",\n  \"execution_id\": \"{{ $json.execution_id }}\",\n  \"user_id\": \"{{ $json.user_id }}\",\n  \"chat_id\": \"{{ $json.chat_id }}\",\n  \"callback_type\": \"{{ $json.callback_type }}\",\n  \"timestamp\": \"{{ $json.timestamp }}\",\n  \"feedback\": \"{{ $json.feedback || '' }}\",\n  \"resume_source\": \"callback_handler_modify\"\n}",
        "options": {}
      },
      "id": "6e0b7f3f-2c9c-4ed5-91b8-c2dd6aa5f020",
      "name": "Resume Image Modify",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1040, 380]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://skinclarityclub.app.n8n.cloud/webhook-waiting/{{ $json.execution_id }}/enterprise-final-approval",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"action\": \"{{ $json.action }}\",\n  \"execution_id\": \"{{ $json.execution_id }}\",\n  \"user_id\": \"{{ $json.user_id }}\",\n  \"chat_id\": \"{{ $json.chat_id }}\",\n  \"callback_type\": \"{{ $json.callback_type }}\",\n  \"timestamp\": \"{{ $json.timestamp }}\",\n  \"feedback\": \"{{ $json.feedback || '' }}\",\n  \"resume_source\": \"callback_handler_modify_final\"\n}",
        "options": {}
      },
      "id": "927bb5ae-041d-4f8c-98b3-4cc3cdb4bd8b",
      "name": "Resume Final Modify",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1100, 1060]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"success\",\n  \"message\": \"Callback processed successfully\",\n  \"execution_id\": \"{{ $json.execution_id || 'unknown' }}\",\n  \"action_taken\": \"{{ $json.action || 'unknown' }}\",\n  \"new_state\": \"{{ $json.new_state || $json.target_state || 'unknown' }}\",\n  \"timestamp\": \"{{ $json.timestamp || new Date().toISOString() }}\",\n  \"webhook_resumed\": true\n}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "c2f90d13-e1fa-4356-80d0-a488ef2d48c4",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1340, 700]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Callback Handler": {
      "main": [
        [
          {
            "node": "Decode Callback Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decode Callback Data": {
      "main": [
        [
          {
            "node": "Message Type Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message Type Router": {
      "main": [
        [
          {
            "node": "Get Current State",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Text Command Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Current State": {
      "main": [
        [
          {
            "node": "Validate State Transition",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate State Transition": {
      "main": [
        [
          {
            "node": "State Validation Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "State Validation Router": {
      "main": [
        [
          {
            "node": "Callback Action Router",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Telegram Invalid State",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Callback Action Router": {
      "main": [
        [
          {
            "node": "Execute State Transition",
            "type": "main",
            "index": 0
          },
          {
            "node": "Telegram Approve Image Post",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute State Transition",
            "type": "main",
            "index": 0
          },
          {
            "node": "Telegram Modify Image Post",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute State Transition",
            "type": "main",
            "index": 0
          },
          {
            "node": "Telegram Approve Final Post",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute State Transition",
            "type": "main",
            "index": 0
          },
          {
            "node": "Telegram Modify Final Post",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute State Transition",
            "type": "main",
            "index": 0
          },
          {
            "node": "Telegram Approve Image Story",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute State Transition",
            "type": "main",
            "index": 0
          },
          {
            "node": "Telegram Modify Image Story",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute State Transition",
            "type": "main",
            "index": 0
          },
          {
            "node": "Telegram Approve Final Story",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute State Transition",
            "type": "main",
            "index": 0
          },
          {
            "node": "Telegram Modify Final Story",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute State Transition",
            "type": "main",
            "index": 0
          },
          {
            "node": "Telegram Approve Image Carousel",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute State Transition",
            "type": "main",
            "index": 0
          },
          {
            "node": "Telegram Modify Image Carousel",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute State Transition",
            "type": "main",
            "index": 0
          },
          {
            "node": "Telegram Approve Final Carousel",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute State Transition",
            "type": "main",
            "index": 0
          },
          {
            "node": "Telegram Modify Final Carousel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute State Transition": {
      "main": [
        [
          {
            "node": "Prepare Resume Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Resume Data": {
      "main": [
        [
          {
            "node": "Resume Action Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Resume Action Router": {
      "main": [
        [
          {
            "node": "Resume Image Approval",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Resume Image Modify",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Resume Final Approval",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Resume Final Modify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Modify Image Post": {
      "main": [
        [
          {
            "node": "Add User Feedback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Modify Final Post": {
      "main": [
        [
          {
            "node": "Add User Feedback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Modify Image Story": {
      "main": [
        [
          {
            "node": "Add User Feedback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Modify Final Story": {
      "main": [
        [
          {
            "node": "Add User Feedback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Modify Image Carousel": {
      "main": [
        [
          {
            "node": "Add User Feedback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Modify Final Carousel": {
      "main": [
        [
          {
            "node": "Add User Feedback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add User Feedback": {
      "main": [
        [
          {
            "node": "Execute State Transition",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Invalid State": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text Command Router": {
      "main": [
        [
          {
            "node": "Execute CreatePost",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Story Creation Confirmation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Carousel Creation Confirmation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "General Chat Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute CreatePost": {
      "main": [
        [
          {
            "node": "Post Creation Confirmation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post Creation Confirmation": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Story Creation Confirmation": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Carousel Creation Confirmation": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "General Chat Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Resume Image Approval": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Resume Final Approval": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Resume Image Modify": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Resume Final Modify": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2da2c943-c1c0-4941-8279-8a12ed1eedf9",
  "meta": {
    "instanceId": "dfdd26cd27fe046d045e60df6b98f78e52a497ca304bdcb672e06512ba750a2c"
  },
  "id": "tIkO8Crv9K5GNw7O",
  "tags": []
}
